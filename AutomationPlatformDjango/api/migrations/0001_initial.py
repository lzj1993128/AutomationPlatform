# Generated by Django 2.1.7 on 2021-11-05 10:00

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(default=None, max_length=200, null=True)),
                ('nickname', models.CharField(default=None, max_length=200, null=True, verbose_name='用户昵称')),
                ('last_login_ip', models.CharField(default=None, max_length=50, null=True, verbose_name='最后登录IP')),
                ('login_count', models.IntegerField(default=0, null=True, verbose_name='不同ip登录统计')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('ac_token', models.CharField(default=None, max_length=100, null=True, verbose_name='actoken')),
                ('phone', models.CharField(default=None, max_length=30, null=True, verbose_name='手机号')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_id', models.CharField(max_length=11, null=True, verbose_name='接口id')),
                ('content', models.TextField()),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('bd_id', models.AutoField(primary_key=True, serialize=False)),
                ('bd_name', models.CharField(max_length=50, verbose_name='业务域名称')),
                ('description', models.CharField(max_length=100, null=True, verbose_name='业务域描述')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('case_id', models.AutoField(primary_key=True, serialize=False)),
                ('case_name', models.CharField(max_length=50)),
                ('case_type', models.CharField(choices=[(0, '单接口用例'), (1, '流程接口用例'), (2, '公共接口用例'), (3, '数据驱动用例')], default=0, max_length=20, verbose_name='用例类型')),
                ('online_type', models.CharField(choices=[(0, False), (1, True)], default=0, max_length=20, verbose_name='线上执行')),
                ('description', models.CharField(max_length=200, null=True, verbose_name='用例描述')),
                ('api_list', models.TextField(default='', verbose_name='包含接口')),
                ('step_info', models.TextField(default=None, verbose_name='存前端传过来的步骤值')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('update_person', models.CharField(max_length=50, null=True, verbose_name='更新人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
                ('bd_id', models.IntegerField(null=True, verbose_name='业务id')),
                ('case_nums', models.IntegerField(null=True, verbose_name='用例数')),
            ],
        ),
        migrations.CreateModel(
            name='CaseLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('case_id', models.IntegerField(null=True, verbose_name='用例id')),
                ('case_name', models.CharField(max_length=50)),
                ('case_type', models.CharField(choices=[(0, '单接口用例'), (1, '流程接口用例'), (2, '公共接口用例'), (3, '数据驱动用例')], default=0, max_length=20, verbose_name='用例类型')),
                ('online_type', models.CharField(choices=[(0, False), (1, True)], default=0, max_length=20, verbose_name='线上执行')),
                ('api_list', models.TextField(default='', verbose_name='包含接口')),
                ('description', models.CharField(max_length=200, null=True, verbose_name='用例描述')),
                ('step_info', models.TextField(default=None, verbose_name='存前端传过来的步骤值')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('bd_id', models.IntegerField(null=True, verbose_name='业务id')),
            ],
            options={
                'db_table': 'case_log',
            },
        ),
        migrations.CreateModel(
            name='CaseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_id', models.CharField(max_length=11, null=True, verbose_name='Caseid')),
                ('content', models.TextField()),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
        ),
        migrations.CreateModel(
            name='CaseTestResult',
            fields=[
                ('case_result_id', models.AutoField(primary_key=True, serialize=False, verbose_name='执行结果id')),
                ('case_name', models.CharField(default=None, max_length=50)),
                ('responseData', models.TextField(blank=True, null=True, verbose_name='实际返回内容')),
                ('result', models.CharField(choices=[('Pass', '成功'), ('Fail', '失败'), ('Error', '错误')], max_length=50, verbose_name='任务执行结果')),
                ('mslog_name', models.CharField(default=None, max_length=100, null=True, verbose_name='错误日志名字')),
                ('mslog_path', models.CharField(default=None, max_length=200, null=True, verbose_name='错误日志路径')),
                ('assertParamResult', models.TextField(blank=True, null=True, verbose_name='断言结果')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Case', verbose_name='测试用例ID')),
            ],
        ),
        migrations.CreateModel(
            name='Database',
            fields=[
                ('db_id', models.AutoField(primary_key=True, serialize=False, verbose_name='数据库主键')),
                ('db_name', models.CharField(max_length=200, verbose_name='数据库名字')),
                ('connect_name', models.CharField(default=None, max_length=200, verbose_name='连接名称')),
                ('db_host', models.CharField(max_length=50, verbose_name='数据库host')),
                ('db_port', models.CharField(max_length=50, verbose_name='数据库端口号')),
                ('db_user', models.CharField(max_length=50, verbose_name='数据库用户名')),
                ('db_passwd', models.CharField(max_length=50, verbose_name='数据库密码')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
                ('db_type', models.CharField(max_length=50, verbose_name='数据库类型')),
            ],
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('email_id', models.AutoField(primary_key=True, serialize=False, verbose_name='邮箱主键')),
                ('email_name', models.CharField(max_length=200, verbose_name='邮箱名字')),
                ('email_type', models.CharField(choices=[(0, '收件人'), (1, '发件人')], default=0, max_length=50, verbose_name='邮箱类型')),
                ('email_address', models.CharField(max_length=200, verbose_name='邮箱地址')),
                ('email_password', models.CharField(default=None, max_length=200, null=True, verbose_name='邮箱密码')),
                ('smtp_address', models.CharField(default=None, max_length=200, null=True, verbose_name='smtp地址')),
                ('smtp_port', models.CharField(default=None, max_length=20, null=True, verbose_name='smtp端口')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Env',
            fields=[
                ('env_id', models.AutoField(primary_key=True, serialize=False, verbose_name='环境主键')),
                ('env_name', models.CharField(max_length=200, verbose_name='环境名字')),
                ('env_url', models.CharField(max_length=200, verbose_name='环境地址')),
                ('env_type', models.IntegerField(choices=[(0, '测试'), (1, '开发'), (2, '预发'), (3, '线上')], default=0, verbose_name='环境类型')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
                ('api_name', models.TextField(verbose_name='接口名称')),
                ('api_url', models.CharField(max_length=200, verbose_name='接口地址')),
                ('method', models.CharField(max_length=4, verbose_name='请求方式,get或者post')),
                ('data_type', models.CharField(max_length=4, verbose_name='数据传输方式')),
                ('description', models.CharField(max_length=100, null=True, verbose_name='接口描述')),
                ('request_header_param', models.TextField(null=True, verbose_name='请求头参数')),
                ('request_body_param', models.TextField(null=True, verbose_name='请求body参数')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
                ('is_sign', models.BooleanField(default=False, verbose_name='是否需要签名')),
                ('request_method', models.CharField(default=None, max_length=10, null=True, verbose_name='http或者dubbo请求')),
                ('zk_database', models.CharField(default=None, max_length=200, null=True, verbose_name='zk注册服务器')),
                ('zk_api_name', models.CharField(default=None, max_length=200, null=True, verbose_name='服务接口名')),
                ('zk_api_method', models.CharField(default='', max_length=200, null=True, verbose_name='服务方法名')),
                ('requestJsonList', models.TextField(default=None, null=True, verbose_name='json请求参数')),
                ('developer', models.CharField(default=None, max_length=20, null=True, verbose_name='开发者')),
            ],
        ),
        migrations.CreateModel(
            name='Jobs',
            fields=[
                ('job_id', models.AutoField(primary_key=True, serialize=False, verbose_name='jobID')),
                ('job_name', models.CharField(max_length=200, verbose_name='脚本名称')),
                ('description', models.CharField(max_length=200, null=True, verbose_name='脚本描述')),
                ('file_name', models.CharField(max_length=200, verbose_name='文件名称')),
                ('save_file_name', models.CharField(default=None, max_length=200, verbose_name='实际保存的文件名字')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('module_id', models.AutoField(primary_key=True, serialize=False)),
                ('module_name', models.CharField(max_length=50, verbose_name='模块名称')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='MSLog',
            fields=[
                ('ms_id', models.AutoField(primary_key=True, serialize=False, verbose_name='微服务日志主键')),
                ('ms_name', models.CharField(max_length=200, verbose_name='微服务名字')),
                ('ms_ip', models.CharField(max_length=50, verbose_name='微服务ip')),
                ('ms_port', models.CharField(max_length=10, verbose_name='微服务port')),
                ('ms_user', models.CharField(max_length=50, verbose_name='用户名')),
                ('ms_password', models.CharField(max_length=50, verbose_name='密码')),
                ('ms_log_list', models.TextField(blank=True, null=True, verbose_name='微服务日志列表')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
                ('module', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Module')),
            ],
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('param_id', models.AutoField(primary_key=True, serialize=False, verbose_name='参数主键')),
                ('param_name', models.CharField(max_length=200, verbose_name='参数名字')),
                ('param_type', models.IntegerField(choices=[(0, '顺序字典'), (1, '随机字典'), (2, '最新月份'), (3, '最新年份'), (4, '最新日期'), (5, '昨日日期')], default=None, null=True)),
                ('description', models.CharField(max_length=200, null=True, verbose_name='用例描述')),
                ('param_list', models.TextField(default=None, null=True, verbose_name='字典集')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('update_person', models.CharField(max_length=50, null=True, verbose_name='更新人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('plan_id', models.AutoField(primary_key=True, serialize=False)),
                ('plan_name', models.CharField(max_length=50, verbose_name='计划名称')),
                ('is_enable', models.BooleanField(default=0, verbose_name='是否启用')),
                ('online_type', models.SmallIntegerField(choices=[(0, '测试'), (1, '线上')], default=0, verbose_name='线上执行')),
                ('case_type', models.SmallIntegerField(choices=[(0, '项目'), (1, '接口用例'), (2, '大数据用例')], default=0, verbose_name='选择的执行用例类型')),
                ('description', models.CharField(max_length=200, null=True, verbose_name='计划描述')),
                ('run_time_start', models.CharField(default=None, max_length=200, verbose_name='运行时间段开始')),
                ('run_time_end', models.CharField(default=None, max_length=200, verbose_name='运行时间段结束')),
                ('run_status', models.CharField(choices=[(0, '未运行'), (1, '运行中'), (2, '运行结束'), (3, '运行异常')], default=0, max_length=50, verbose_name='运行状态')),
                ('rebotList', models.TextField(default=None, verbose_name='群机器人')),
                ('projectList', models.TextField(default=None, verbose_name='项目list')),
                ('caseList', models.TextField(default=None, verbose_name='caselist')),
                ('envList', models.TextField(default=None, verbose_name='环境列表')),
                ('emailList', models.TextField(default=None, verbose_name='收件人邮箱列表')),
                ('msLogList', models.TextField(default=None, verbose_name='微服务日志列表')),
                ('bigDataList', models.TextField(default=None, verbose_name='大数据列表')),
                ('dbList', models.TextField(default=None, verbose_name='数据库列表')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('prj_id', models.AutoField(primary_key=True, serialize=False)),
                ('prj_name', models.CharField(max_length=50, verbose_name='项目名称')),
                ('description', models.CharField(max_length=100, null=True, verbose_name='项目描述')),
                ('creator', models.CharField(max_length=50, null=True, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.CharField(choices=[(0, '否'), (1, '是')], default=0, max_length=20, verbose_name='是否删除')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('report_name', models.CharField(max_length=255, verbose_name='报告名字')),
                ('case_num', models.IntegerField(null=True, verbose_name='用例运行数')),
                ('pass_num', models.IntegerField(null=True, verbose_name='成功数')),
                ('fail_num', models.IntegerField(null=True, verbose_name='失败数')),
                ('error_num', models.IntegerField(null=True, verbose_name='错误数')),
                ('api_total_nums', models.IntegerField(null=True, verbose_name='执行大数据api是否存在总数')),
                ('pass_api_total_nums', models.IntegerField(default=None, null=True, verbose_name='大数据总api通过数')),
                ('fail_api_total_nums', models.IntegerField(default=None, null=True, verbose_name='大数据总api失败数')),
                ('error_api_total_nums', models.IntegerField(default=None, null=True, verbose_name='大数据总api错误数')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Plan')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(default=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskHistory',
            fields=[
                ('task_id', models.AutoField(primary_key=True, serialize=False, verbose_name='历史执行id')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Plan', verbose_name='外键plan_id')),
            ],
        ),
        migrations.AddField(
            model_name='mslog',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Project'),
        ),
        migrations.AddField(
            model_name='module',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Project'),
        ),
        migrations.AddField(
            model_name='interface',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Module'),
        ),
        migrations.AddField(
            model_name='interface',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Project'),
        ),
        migrations.AddField(
            model_name='casetestresult',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Report', verbose_name='报告ID'),
        ),
        migrations.AddField(
            model_name='caselog',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Module'),
        ),
        migrations.AddField(
            model_name='caselog',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Project'),
        ),
        migrations.AddField(
            model_name='case',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Module'),
        ),
        migrations.AddField(
            model_name='case',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Project'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
