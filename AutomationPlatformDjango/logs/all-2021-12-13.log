[2021-12-13 10:04:48,757] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 10:11:05,900] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 10:12:23,233] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 10:17:15,141] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 10:19:20,843] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 10:21:15,293] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 10:21:15,287] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 10:21:15,299] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2021-12-13 10:21:15,301] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2021-12-13 10:21:15,301] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 10:21:15,302] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 10:21:15,321] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 10:21:15,340] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 10:21:15,360] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 1899
[2021-12-13 10:21:15,708] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 4491
[2021-12-13 11:10:27,239] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 11:10:30,889] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:30,892] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:30,893] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2021-12-13 11:10:30,895] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2021-12-13 11:10:30,896] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:30,896] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:34,589] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:35,553] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 7068
[2021-12-13 11:10:35,645] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:36,291] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 1296
[2021-12-13 11:10:36,350] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 500 59
[2021-12-13 11:10:38,916] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 11:10:39,621] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:39,621] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2021-12-13 11:10:39,622] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:39,628] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:39,632] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2021-12-13 11:10:39,634] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:40,928] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:40,984] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:41,073] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 1296
[2021-12-13 11:10:41,282] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 7068
[2021-12-13 11:10:43,582] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:43,585] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:43,586] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2021-12-13 11:10:43,586] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2021-12-13 11:10:43,587] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:43,588] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:44,151] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:44,251] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:44,336] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 22556
[2021-12-13 11:10:47,231] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:47,232] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexphistory():
[2021-12-13 11:10:47,233] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:47,538] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:47,629] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexphistory?tableid=20 HTTP/1.1" 200 2151
[2021-12-13 11:10:49,918] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:10:49,927] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2021-12-13 11:10:49,929] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:10:50,025] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 200 342205
[2021-12-13 11:10:50,154] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:10:50,263] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=20 HTTP/1.1" 200 26559
[2021-12-13 11:11:56,388] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 11:11:56,688] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:11:56,689] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2021-12-13 11:11:56,690] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:11:56,942] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:11:57,055] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=20 HTTP/1.1" 200 26559
[2021-12-13 11:16:21,419] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 11:16:21,757] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:16:21,762] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:16:21,763] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2021-12-13 11:16:21,763] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2021-12-13 11:16:21,764] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:16:21,764] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:16:21,979] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:16:21,980] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:16:22,065] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 1296
[2021-12-13 11:16:22,164] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 7068
[2021-12-13 11:16:24,837] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:16:24,841] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:16:24,844] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2021-12-13 11:16:24,845] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2021-12-13 11:16:24,845] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:16:24,846] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:16:25,042] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:16:25,043] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:16:25,127] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 22556
[2021-12-13 11:16:32,138] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 200 342205
[2021-12-13 11:26:11,755] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:26:11,757] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:26:11,758] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2021-12-13 11:26:11,758] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2021-12-13 11:26:11,758] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:26:11,759] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:26:11,987] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:26:11,991] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:26:12,069] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 22556
[2021-12-13 11:26:13,366] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2021-12-13 11:26:13,590] [dataCheck.py:95] [dataCheck:checkJob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],开始探查表:rpt_hkq_visual_performance_hq_brand
[2021-12-13 11:26:13,591] [dataCheck.py:96] [dataCheck:checkJob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查表重复数据
[2021-12-13 11:26:17,169] [dataCheck.py:98] [dataCheck:checkJob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查表主键重复数据
[2021-12-13 11:26:23,840] [dataCheck.py:102] [dataCheck:checkJob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查表信息
[2021-12-13 11:26:24,017] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：a_coupon_gross_money
[2021-12-13 11:26:24,018] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：b_coupon_gross_money
[2021-12-13 11:26:24,019] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：b_coupon_in_stock_money
[2021-12-13 11:26:24,029] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：in_stock_complete_rate
[2021-12-13 11:26:24,034] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：load_dt
[2021-12-13 11:26:30,431] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：market_cost
[2021-12-13 11:26:30,469] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：monthly_customer_per_price
[2021-12-13 11:26:30,806] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：monthly_store_price
[2021-12-13 11:26:31,445] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：new_client_in_stock_money
[2021-12-13 11:26:31,632] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：new_client_num
[2021-12-13 11:26:36,134] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：old_client_in_stock_money
[2021-12-13 11:26:37,594] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：old_client_num
[2021-12-13 11:26:37,880] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：pt
[2021-12-13 11:26:38,148] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：region_id
[2021-12-13 11:26:38,393] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：region_name
[2021-12-13 11:26:42,268] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：region_parent_id
[2021-12-13 11:26:44,096] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：region_type
[2021-12-13 11:26:44,255] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：sales_rate
[2021-12-13 11:26:44,761] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：sort_column
[2021-12-13 11:26:46,599] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：trade_client_rate
[2021-12-13 11:26:48,215] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:4f3a6b921133c1c1ebe0bf46d90b3006],探查字段信息：update_dt
[2021-12-13 11:26:56,825] [dataCheck.py:183] [dataCheck:runjob] [INFO]- 探查结束
[2021-12-13 11:28:59,889] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:28:59,890] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:28:59,893] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2021-12-13 11:28:59,893] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2021-12-13 11:28:59,894] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:28:59,895] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:29:00,345] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:29:00,346] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:29:00,444] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 22556
[2021-12-13 11:29:02,023] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2021-12-13 11:29:02,135] [dataCheck.py:95] [dataCheck:checkJob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],开始探查表:rpt_hkq_visual_performance_hq_brand
[2021-12-13 11:29:02,140] [dataCheck.py:96] [dataCheck:checkJob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查表重复数据
[2021-12-13 11:29:05,764] [dataCheck.py:98] [dataCheck:checkJob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查表主键重复数据
[2021-12-13 11:29:11,256] [dataCheck.py:102] [dataCheck:checkJob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查表信息
[2021-12-13 11:29:11,413] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：a_coupon_gross_money
[2021-12-13 11:29:11,414] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：b_coupon_gross_money
[2021-12-13 11:29:11,422] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：b_coupon_in_stock_money
[2021-12-13 11:29:11,430] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：in_stock_complete_rate
[2021-12-13 11:29:11,431] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：load_dt
[2021-12-13 11:29:16,895] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：market_cost
[2021-12-13 11:29:17,106] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：monthly_customer_per_price
[2021-12-13 11:29:17,205] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：monthly_store_price
[2021-12-13 11:29:19,140] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：new_client_in_stock_money
[2021-12-13 11:29:19,239] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：new_client_num
[2021-12-13 11:29:22,644] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：old_client_in_stock_money
[2021-12-13 11:29:22,677] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：old_client_num
[2021-12-13 11:29:23,962] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：pt
[2021-12-13 11:29:25,514] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：region_id
[2021-12-13 11:29:25,854] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：region_name
[2021-12-13 11:29:29,499] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：region_parent_id
[2021-12-13 11:29:29,604] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：region_type
[2021-12-13 11:29:29,813] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：sales_rate
[2021-12-13 11:29:33,061] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：sort_column
[2021-12-13 11:29:33,448] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：trade_client_rate
[2021-12-13 11:29:35,601] [dataCheck.py:50] [dataCheck:threadjob] [INFO]- [taskid:af51c8950d3a791e0b690dcca033ded0],探查字段信息：update_dt
[2021-12-13 11:29:42,494] [dataCheck.py:183] [dataCheck:runjob] [INFO]- 探查结束
[2021-12-13 11:29:47,211] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:29:47,212] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexphistory():
[2021-12-13 11:29:47,213] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:29:47,342] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:29:47,398] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexphistory?tableid=21 HTTP/1.1" 200 6418
[2021-12-13 11:29:49,531] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:29:49,532] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2021-12-13 11:29:49,532] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:29:49,779] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:29:49,932] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?id=68 HTTP/1.1" 200 28550
[2021-12-13 11:37:21,033] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:37:21,035] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:37:21,070] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2021-12-13 11:37:21,072] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2021-12-13 11:37:21,073] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:37:21,073] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:37:21,386] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:37:21,397] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:37:21,558] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 22562
[2021-12-13 11:37:23,721] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:37:23,722] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2021-12-13 11:37:23,725] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 11:37:23,727] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:37:23,727] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2021-12-13 11:37:23,731] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 11:37:24,024] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:37:24,031] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 11:37:24,133] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 1296
[2021-12-13 11:37:24,267] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 7068
[2021-12-13 11:37:26,459] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 200 342320
[2021-12-13 11:38:25,721] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 672
[2021-12-13 11:38:25,852] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2021-12-13 11:38:26,619] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 1019
[2021-12-13 11:38:26,972] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 200 36007
[2021-12-13 14:22:58,422] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 14:23:00,262] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 672
[2021-12-13 14:23:00,302] [log.py:228] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/gethistory
Traceback (most recent call last):
  File "D:\Python36\lib\site-packages\django\db\backends\utils.py", line 85, in _execute
    return self.cursor.execute(sql, params)
  File "D:\Python36\lib\site-packages\django\db\backends\mysql\base.py", line 71, in execute
    return self.cursor.execute(query, args)
  File "D:\Python36\lib\site-packages\pymysql\cursors.py", line 163, in execute
    result = self._query(query)
  File "D:\Python36\lib\site-packages\pymysql\cursors.py", line 321, in _query
    conn.query(q)
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 505, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 724, in _read_query_result
    result.read()
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 1069, in read
    first_packet = self.connection._read_packet()
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 676, in _read_packet
    packet.raise_for_error()
  File "D:\Python36\lib\site-packages\pymysql\protocol.py", line 223, in raise_for_error
    err.raise_mysql_exception(self._data)
  File "D:\Python36\lib\site-packages\pymysql\err.py", line 107, in raise_mysql_exception
    raise errorclass(errno, errval)
pymysql.err.OperationalError: (1054, "Unknown column 'data_monior_dataworks_alltables_rule_result.resontype' in 'field list'")

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Python36\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\Python36\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\Python36\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Python36\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\Python36\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 182, in get_monior_history
    _data = pageUtil.searchSqlFieldData(table)
  File "D:\project\AutomationPlatformDjango\utils\PageUtil.py", line 75, in searchSqlFieldData
    if len(result) == 0:
  File "D:\Python36\lib\site-packages\django\db\models\query.py", line 250, in __len__
    self._fetch_all()
  File "D:\Python36\lib\site-packages\django\db\models\query.py", line 1186, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File "D:\Python36\lib\site-packages\django\db\models\query.py", line 54, in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
  File "D:\Python36\lib\site-packages\django\db\models\sql\compiler.py", line 1065, in execute_sql
    cursor.execute(sql, params)
  File "D:\Python36\lib\site-packages\django\db\backends\utils.py", line 68, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "D:\Python36\lib\site-packages\django\db\backends\utils.py", line 77, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "D:\Python36\lib\site-packages\django\db\backends\utils.py", line 85, in _execute
    return self.cursor.execute(sql, params)
  File "D:\Python36\lib\site-packages\django\db\utils.py", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "D:\Python36\lib\site-packages\django\db\backends\utils.py", line 85, in _execute
    return self.cursor.execute(sql, params)
  File "D:\Python36\lib\site-packages\django\db\backends\mysql\base.py", line 71, in execute
    return self.cursor.execute(query, args)
  File "D:\Python36\lib\site-packages\pymysql\cursors.py", line 163, in execute
    result = self._query(query)
  File "D:\Python36\lib\site-packages\pymysql\cursors.py", line 321, in _query
    conn.query(q)
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 505, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 724, in _read_query_result
    result.read()
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 1069, in read
    first_packet = self.connection._read_packet()
  File "D:\Python36\lib\site-packages\pymysql\connections.py", line 676, in _read_packet
    packet.raise_for_error()
  File "D:\Python36\lib\site-packages\pymysql\protocol.py", line 223, in raise_for_error
    err.raise_mysql_exception(self._data)
  File "D:\Python36\lib\site-packages\pymysql\err.py", line 107, in raise_mysql_exception
    raise errorclass(errno, errval)
django.db.utils.OperationalError: (1054, "Unknown column 'data_monior_dataworks_alltables_rule_result.resontype' in 'field list'")
[2021-12-13 14:23:00,344] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/monior/gethistory HTTP/1.1" 500 27
[2021-12-13 14:23:00,852] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 1043
[2021-12-13 14:23:00,913] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 200 38105
[2021-12-13 14:24:01,007] [LoginView.py:61] [LoginView:login] [INFO]- {'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROGRAMFILES': 'C:\\Program Files', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'COMPUTERNAME': 'DESKTOP-3R8DDF0', 'ONEDRIVECONSUMER': 'C:\\Users\\86155\\OneDrive', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\86155\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-32', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '8', 'LOGONSERVER': '\\\\DESKTOP-3R8DDF0', 'TEMP': 'C:\\Users\\86155\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\86155\\AppData\\Local\\Temp', 'HOMEPATH': '\\Users\\86155', '__PSLOCKDOWNPOLICY': '4', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'IDEA_INITIAL_DIRECTORY': 'D:\\Program Files\\JetBrains\\PyCharm 2020.3.3\\jbr\\bin', 'USERNAME': '86155', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-3R8DDF0', 'LOCALAPPDATA': 'C:\\Users\\86155\\AppData\\Local', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 142 Stepping 11, GenuineIntel', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'APPDATA': 'C:\\Users\\86155\\AppData\\Roaming', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERDOMAIN': 'DESKTOP-3R8DDF0', 'PROCESSOR_LEVEL': '6', 'PROGRAMDATA': 'C:\\ProgramData', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'SYSTEMROOT': 'C:\\WINDOWS', 'USERPROFILE': 'C:\\Users\\86155', 'PROCESSOR_REVISION': '8e0b', 'ONEDRIVE': 'C:\\Users\\86155\\OneDrive', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;E:\\app\\86155\\product\\11.2.0\\dbhome_1\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;D:\\软件\\TortoiseSVN\\bin;C;\\Program Files\\PuTTY\\;C:\\Program Files\\PuTTY;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;D:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;D:\\tesserract\\Tesseract-OCR;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\Python36;D:\\Python36\\Scripts;D:\\Program Files\\nodejs\\node_modules\\npm;E:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;D:\\Program Files\\nodejs\\;D:\\Program Files\\Git\\cmd;C:\\Users\\86155\\AppData\\Local\\Microsoft\\WindowsApps;D:\\tesserract\\Tesseract-OCR;D:\\Python36\\Lib\\site-packages\\allure-2.13.5\\bin;C:\\Users\\86155\\AppData\\Roaming\\npm;D:\\Program Files\\nodejs\\node_global;', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'NODE_PATH': 'D:\\Program Files\\nodejs\\node_modules', 'WINDIR': 'C:\\WINDOWS', 'PROGRAMW6432': 'C:\\Program Files', 'OS': 'Windows_NT', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PUBLIC': 'C:\\Users\\Public', 'HOMEDRIVE': 'C:', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'DESKTOP-3R8DDF0', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'User-Id=4; sidebarStatus=1', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x00000214EB79C6D8>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2021-12-13 14:24:01,060] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2021-12-13 14:24:01,060] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 172.25.38.233
[2021-12-13 14:24:01,090] [LoginService.py:25] [LoginService:checkLoginIP] [INFO]- 检测到登录ip不一致，添加次数
[2021-12-13 14:24:01,872] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2021-12-13 14:24:01,899] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 200 239
[2021-12-13 14:24:01,907] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/user/info?token=fe3dba4fec7d750350ada0c25e9740e5 HTTP/1.1" 500 59
[2021-12-13 14:24:02,519] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e1ec957e83a9a87d38a71d3d2e5262a7 HTTP/1.1" 200 239
[2021-12-13 14:24:04,909] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 672
[2021-12-13 14:24:04,910] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 1043
[2021-12-13 14:24:04,975] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 1677
[2021-12-13 14:24:05,268] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 200 38105
[2021-12-13 14:25:13,390] [DataMoniorView.py:1062] [DataMoniorView:job_listener] [INFO]- five_minute_job (trigger: cron[day_of_week='mon-fri', hour='9-18', minute='*/5'], next run at: 2021-12-13 14:30:00 CST)
[2021-12-13 14:26:09,711] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e1ec957e83a9a87d38a71d3d2e5262a7 HTTP/1.1" 200 239
[2021-12-13 14:26:12,228] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 672
[2021-12-13 14:26:12,336] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 1677
[2021-12-13 14:26:12,676] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 1043
[2021-12-13 14:26:12,746] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 200 38105
[2021-12-13 14:26:39,181] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 7770
[2021-12-13 14:26:53,043] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 7783
[2021-12-13 14:26:53,150] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 14:26:53,155] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_rule_handle_history():
[2021-12-13 14:26:53,156] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 14:26:53,305] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 14:26:53,324] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?rule_id=28554182&type=SingleRuleRunHistory HTTP/1.1" 200 255
[2021-12-13 14:26:53,331] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/getrulehandlehistory HTTP/1.1" 200 2086
[2021-12-13 14:29:20,316] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 14:29:20,317] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为rule_handle():
[2021-12-13 14:29:20,318] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 14:29:20,575] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 14:29:20,696] [log.py:228] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/rulehandle
Traceback (most recent call last):
  File "D:\Python36\lib\site-packages\django\db\models\options.py", line 564, in get_field
    return self.fields_map[field_name]
KeyError: 'resontypedes'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Python36\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\Python36\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\Python36\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Python36\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\Python36\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 293, in rule_handle
    handle_status=1, over_time=over_time,resontypedes=resontypedes, resontype=resontype
  File "D:\Python36\lib\site-packages\django\db\models\query.py", line 689, in update
    query.add_update_values(kwargs)
  File "D:\Python36\lib\site-packages\django\db\models\sql\subqueries.py", line 117, in add_update_values
    field = self.get_meta().get_field(name)
  File "D:\Python36\lib\site-packages\django\db\models\options.py", line 566, in get_field
    raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, field_name))
django.core.exceptions.FieldDoesNotExist: dataworks_alltables_rule_result has no field named 'resontypedes'
[2021-12-13 14:29:20,723] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/monior/rulehandle HTTP/1.1" 500 27
[2021-12-13 14:30:00,026] [questionJob.py:93] [questionJob:get_Lead_warehouse_question] [INFO]- 开始获取前置仓dms数据库线上问题
[2021-12-13 14:30:02,375] [questionJob.py:109] [questionJob:get_Lead_warehouse_question] [INFO]- 前置仓无新增线上问题
[2021-12-13 14:30:02,395] [DataMoniorView.py:1062] [DataMoniorView:job_listener] [INFO]- getOnlineQuestion (trigger: cron[minute='*/30'], next run at: 2021-12-13 15:00:00 CST)
[2021-12-13 14:30:09,424] [DataMoniorView.py:1062] [DataMoniorView:job_listener] [INFO]- five_minute_job (trigger: cron[day_of_week='mon-fri', hour='9-18', minute='*/5'], next run at: 2021-12-13 14:35:00 CST)
[2021-12-13 14:30:36,229] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e1ec957e83a9a87d38a71d3d2e5262a7 HTTP/1.1" 200 239
[2021-12-13 14:30:38,069] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 672
[2021-12-13 14:30:38,217] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 1677
[2021-12-13 14:30:38,800] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 1043
[2021-12-13 14:30:38,877] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 200 38105
[2021-12-13 14:30:44,234] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2021-12-13 14:30:44,579] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/ruledistribution?table_schema=ncz_adm HTTP/1.1" 200 5537
[2021-12-13 14:30:47,200] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 3565
[2021-12-13 14:31:09,260] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2021-12-13 14:31:09,267] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为rule_handle():
[2021-12-13 14:31:09,277] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2021-12-13 14:31:09,414] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2021-12-13 14:31:09,492] [log.py:228] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/rulehandle
Traceback (most recent call last):
  File "D:\Python36\lib\site-packages\django\db\models\options.py", line 564, in get_field
    return self.fields_map[field_name]
KeyError: 'resontypedes'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Python36\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\Python36\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\Python36\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Python36\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\Python36\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 293, in rule_handle
    handle_status=1, over_time=over_time,resontypedes=resontypedes, resontype=resontype
  File "D:\Python36\lib\site-packages\django\db\models\query.py", line 689, in update
    query.add_update_values(kwargs)
  File "D:\Python36\lib\site-packages\django\db\models\sql\subqueries.py", line 117, in add_update_values
    field = self.get_meta().get_field(name)
  File "D:\Python36\lib\site-packages\django\db\models\options.py", line 566, in get_field
    raise FieldDoesNotExist("%s has no field named '%s'" % (self.object_name, field_name))
django.core.exceptions.FieldDoesNotExist: dataworks_alltables_rule_result has no field named 'resontypedes'
[2021-12-13 14:31:09,500] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/monior/rulehandle HTTP/1.1" 500 27
