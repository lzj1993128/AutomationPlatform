[2022-04-24 10:10:00,465] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 76
[2022-04-24 10:10:12,828] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e; User-Id=4; sidebarStatus=1', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x0000025516407220>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-24 10:10:12,831] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-24 10:10:12,836] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-24 10:10:12,839] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-24 10:10:12,846] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2022-04-24 10:10:12,870] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:10:13,156] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:13,158] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:10:13,161] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:13,164] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:13,170] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:10:13,178] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:13,178] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 10:10:13,179] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:13,180] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:13,648] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264B18554CF64C5BDC707E6
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 10:10:13,658] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 500 27
[2022-04-24 10:10:20,317] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:20,318] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userSearch():
[2022-04-24 10:10:20,319] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:20,323] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:20,325] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/user/search HTTP/1.1" 200 496
[2022-04-24 10:10:28,236] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:28,236] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:28,237] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 10:10:28,237] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 10:10:28,239] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:28,239] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:28,242] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:28,243] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:28,245] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 10:10:28,245] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 10:10:30,617] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:30,617] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:10:30,618] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:10:30,618] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 10:10:30,620] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:30,620] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:10:30,625] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:30,625] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:10:30,629] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:10:30,964] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264B196E42F2331D5BF5DB9
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 10:10:30,968] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 500 27
[2022-04-24 10:12:45,952] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:12:45,953] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 10:12:45,953] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:12:45,955] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:12:45,957] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 343
[2022-04-24 10:14:04,040] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:14:04,041] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 10:14:04,041] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:14:04,045] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:14:04,049] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 343
[2022-04-24 10:25:36,056] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:25:36,056] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:25:36,057] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:25:36,060] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-24 10:25:36,062] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getDatabase HTTP/1.1" 200 70
[2022-04-24 10:25:41,914] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:25:41,915] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:25:41,916] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:25:41,919] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-24 10:25:41,921] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 70
[2022-04-24 10:25:59,994] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:26:00,159] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:26:00,160] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 10:26:00,161] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:26:00,164] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:26:00,169] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 343
[2022-04-24 10:26:06,874] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:26:06,875] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:26:06,879] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:26:06,884] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-24 10:26:06,885] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:26:06,890] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getDatabase
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 872, in getDatabase
    return JsonResponse(data=responseData, safe=False)
  File "D:\python\lib\site-packages\django\http\response.py", line 558, in __init__
    data = json.dumps(data, cls=encoder, **json_dumps_params)
  File "D:\python\lib\json\__init__.py", line 234, in dumps
    return cls(
  File "D:\python\lib\json\encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "D:\python\lib\json\encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "D:\python\lib\site-packages\django\core\serializers\json.py", line 104, in default
    return super().default(o)
  File "D:\python\lib\json\encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type QuerySet is not JSON serializable
[2022-04-24 10:26:06,916] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 500 27
[2022-04-24 10:26:41,910] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:26:41,914] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:26:41,916] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:26:41,921] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-24 10:26:41,922] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:26:41,925] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:31:03,249] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:31:03,399] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:31:03,402] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 10:31:03,408] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:31:03,414] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:31:03,419] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 343
[2022-04-24 10:31:12,364] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:31:12,365] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:31:12,367] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 10:31:12,369] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 10:31:12,369] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:31:12,370] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:31:12,374] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:31:12,375] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:31:12,379] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 10:31:12,380] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 10:31:14,105] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:31:14,106] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:31:14,109] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:31:14,114] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:31:14,117] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:32:45,520] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:32:45,521] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:32:45,522] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:32:45,524] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:32:45,527] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:32:45,532] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:32:45,533] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:32:45,533] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:32:45,535] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:32:45,538] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:32:47,910] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:32:48,053] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:32:48,054] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:32:48,055] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:32:48,060] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:32:48,061] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:32:48,062] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:32:48,066] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:32:48,068] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:32:48,071] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:32:48,071] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:32:51,930] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:32:52,103] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:32:52,104] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:32:52,106] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:32:52,107] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:32:52,108] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:32:52,108] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:32:52,112] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:32:52,115] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:32:52,117] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:32:52,120] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:34:10,738] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:34:10,969] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:34:10,970] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:34:10,974] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:34:10,976] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:34:10,978] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:34:10,979] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:34:10,980] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:34:10,985] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:34:10,988] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:34:10,989] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:37:29,355] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:37:33,619] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:37:33,620] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:37:33,621] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 10:37:33,624] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 10:37:33,629] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:37:33,629] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:37:33,632] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:37:33,632] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:37:33,635] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 10:37:33,635] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 10:37:37,042] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:37:37,046] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:37:37,046] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:37:37,049] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:37:37,049] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:37:37,054] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:37:37,055] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:37:37,059] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:37:37,060] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:37:37,063] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:38:38,009] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:38:38,215] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:38:38,216] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:38:38,219] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:38:38,224] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:38:38,224] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:38:38,225] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:38:38,229] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:38:38,229] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:38:38,232] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:38:38,232] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:39:50,952] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:39:50,953] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:39:50,956] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:39:50,961] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:39:50,963] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:39:50,968] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:39:50,969] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:39:50,970] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:39:50,973] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:39:50,976] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:39:53,959] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:39:54,142] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:39:54,144] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:39:54,146] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:39:54,147] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:39:54,148] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:39:54,148] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:39:54,152] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:39:54,154] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:39:54,155] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:39:54,157] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:40:55,621] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:40:55,859] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:40:55,861] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:40:55,862] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:40:55,863] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:40:55,864] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:40:55,864] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:40:55,870] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:40:55,870] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:40:55,873] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:40:55,873] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:41:33,098] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:41:33,099] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 10:41:33,101] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:41:33,104] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:41:33,109] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 10:41:33,115] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:41:33,116] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 10:41:33,116] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:41:33,118] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:41:33,121] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 10:41:43,228] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:41:43,229] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:41:43,231] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:41:43,234] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:41:43,238] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:41:43,244] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:41:43,245] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:41:43,246] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:41:43,248] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:41:43,252] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:43:04,605] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:04,606] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:43:04,610] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:04,615] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:04,617] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:43:04,622] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:04,623] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:43:04,626] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:04,628] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:04,630] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:43:08,912] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:43:09,096] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:09,096] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:09,097] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:43:09,099] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:43:09,099] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:09,099] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:09,103] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:09,104] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:09,111] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:43:09,111] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:43:39,161] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:39,161] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:43:39,163] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:39,167] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:39,169] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:43:39,178] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:39,180] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:43:39,180] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:39,182] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:39,184] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:43:46,570] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:46,571] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 10:43:46,572] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:46,575] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:46,576] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 10:43:46,585] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:46,586] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 10:43:46,587] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:46,590] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:46,593] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 10:43:49,606] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:49,607] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:43:49,608] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:43:49,610] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:43:49,612] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:49,613] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:43:49,618] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:49,619] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:43:49,622] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 392
[2022-04-24 10:43:49,622] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:44:58,352] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:44:58,355] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 10:44:58,356] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:44:58,360] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:44:58,364] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 343
[2022-04-24 10:45:05,241] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:45:05,242] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addDB():
[2022-04-24 10:45:05,245] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:45:05,249] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:45:05,262] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/add HTTP/1.1" 200 87
[2022-04-24 10:45:05,277] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:45:05,278] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 10:45:05,282] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:45:05,287] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:45:05,290] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 458
[2022-04-24 10:45:10,678] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:45:10,679] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:45:10,680] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 10:45:10,681] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 10:45:10,681] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:45:10,682] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:45:10,686] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:45:10,686] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:45:10,691] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 10:45:10,691] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 10:45:12,510] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:45:12,510] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:45:12,511] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:45:12,512] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:45:12,516] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:45:12,517] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:45:12,522] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:45:12,523] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:45:12,526] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:45:12,527] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 10:46:29,676] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 10:46:29,864] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:46:29,865] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:46:29,867] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:46:29,868] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:46:29,868] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:46:29,869] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:46:29,871] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:46:29,873] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:46:29,876] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 10:46:29,877] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:59:03,482] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:59:03,483] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 10:59:03,485] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:59:03,490] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:59:03,492] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 10:59:03,499] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 10:59:03,499] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 10:59:03,500] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 10:59:03,502] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 10:59:03,506] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:00:07,026] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:00:07,027] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:00:07,031] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:00:07,034] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:00:07,039] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:00:07,047] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:00:07,048] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:00:07,049] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:00:07,054] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:00:07,059] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:00:09,981] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:00:10,181] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:00:10,183] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:00:10,184] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:00:10,191] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:00:10,191] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:00:10,192] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:00:10,194] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:00:10,197] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:00:10,197] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:00:10,200] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:00:27,847] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:00:28,046] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:00:28,048] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:00:28,048] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:00:28,051] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:00:28,051] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:00:28,052] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:00:28,054] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:00:28,057] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:00:28,060] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:00:28,063] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:02:19,607] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:02:19,608] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:02:19,610] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:02:19,616] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:02:19,619] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:02:19,624] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:02:19,625] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:02:19,625] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:02:19,628] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:02:19,632] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:02:22,894] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:02:23,086] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:02:23,087] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:02:23,089] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:02:23,090] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:02:23,090] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:02:23,090] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:02:23,097] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:02:23,097] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:02:23,102] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:02:23,102] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:04:17,935] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:04:18,205] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:04:18,207] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:04:18,208] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:04:18,209] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:04:18,209] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:04:18,210] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:04:18,218] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:04:18,219] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:04:18,224] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:04:18,224] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:04:51,888] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:04:51,889] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:04:51,891] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:04:51,892] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:04:51,893] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:04:51,894] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:04:51,896] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:04:51,899] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:04:51,899] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:04:51,902] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:04:55,459] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:04:55,668] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:04:55,669] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:04:55,671] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:04:55,676] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:04:55,678] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:04:55,680] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:04:55,683] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:04:55,684] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:04:55,687] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:04:55,688] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:19:06,915] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:19:06,916] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:19:06,918] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:19:06,922] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:19:06,923] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:19:06,933] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:19:06,933] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:19:06,934] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:19:06,936] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:19:06,938] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:19:10,217] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:19:10,500] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:19:10,502] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:19:10,503] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:19:10,504] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:19:10,504] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:19:10,504] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:19:10,511] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:19:10,516] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:19:10,515] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:19:10,521] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:28:55,667] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:28:55,668] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:28:55,669] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:28:55,675] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:28:55,678] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:28:55,686] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:28:55,687] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:28:55,688] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:28:55,693] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:28:55,696] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:28:59,277] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:28:59,594] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:28:59,599] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:28:59,599] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:28:59,600] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 11:28:59,600] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:28:59,601] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:28:59,606] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:28:59,610] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:28:59,612] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:28:59,616] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 11:29:44,672] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:29:44,673] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:29:44,674] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:29:44,676] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:29:44,684] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:29:44,691] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:29:44,692] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 11:29:44,692] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:29:44,696] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:29:45,271] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264C429619FCF4C2E02AE11
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 11:29:45,284] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 500 27
[2022-04-24 11:29:54,031] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 11:29:54,234] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:29:54,234] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 11:29:54,237] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 11:29:54,238] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 11:29:54,239] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:29:54,239] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 11:29:54,243] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:29:54,246] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 11:29:54,247] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 11:29:54,497] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264C43254CF64C5BD1061A7
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 11:29:54,500] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 500 27
[2022-04-24 12:03:47,348] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:03:47,703] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:03:47,704] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:03:47,704] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:03:47,706] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:03:47,706] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:03:47,707] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:03:47,711] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:03:47,712] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:03:47,718] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:03:48,032] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264CC2414242AB26B3373DC
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 12:03:48,042] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 500 27
[2022-04-24 12:06:47,821] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:06:47,823] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:06:47,824] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:06:47,827] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:06:47,829] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:06:47,835] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:06:47,835] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:06:47,836] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:06:47,838] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:06:48,049] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264CCD86CBF9705E236558E
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 12:06:48,051] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=nczbigdata HTTP/1.1" 500 27
[2022-04-24 12:07:06,302] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:07:06,303] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:07:06,303] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:07:06,304] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:07:06,305] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:07:06,305] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:07:06,308] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:07:06,308] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:07:06,311] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:07:06,311] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:08:30,480] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:08:30,481] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:08:30,481] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:08:30,485] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:08:30,487] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:08:30,492] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:08:30,493] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:08:30,493] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:08:30,496] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:08:30,498] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:08:35,718] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:08:35,940] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:08:35,941] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:08:35,941] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:08:35,943] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:08:35,943] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:08:35,943] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:08:35,947] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:08:35,954] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:08:35,969] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:08:35,973] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:08:44,250] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:08:44,252] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:08:44,255] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:08:44,258] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:08:44,432] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264CD4C619FCF4C2E23A6D5
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 12:08:44,436] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 500 27
[2022-04-24 12:09:11,126] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:09:11,339] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:09:11,340] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:09:11,342] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:09:11,342] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:09:11,343] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:09:11,344] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:09:11,347] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:09:11,350] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:09:11,355] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:09:11,355] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:09:39,689] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:09:39,985] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:09:39,988] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:09:39,990] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:09:39,991] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:09:39,991] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:09:39,992] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:09:39,995] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:09:39,996] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:09:39,999] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:09:40,000] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:09:43,164] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:09:43,165] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:09:43,166] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:09:43,171] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:09:43,378] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264CD8714242AB26B398C3C
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 12:09:43,384] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T09:45:56.812%22,%22is_delete%22:%220%22,%22db_type%22:%22sqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:09:44,728] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:09:44,730] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:09:44,731] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:09:44,736] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:09:44,957] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 47, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 26, in select_sql_dict
    instance = self.execute_sql(sql)
  File "D:\python\lib\site-packages\odps\core.py", line 789, in execute_sql
    inst = self.run_sql(
  File "D:\python\lib\site-packages\odps\core.py", line 834, in run_sql
    return project.instances.create(task=task, priority=priority,
  File "D:\python\lib\site-packages\odps\models\instances.py", line 148, in create
    resp = self._client.post(url, xml, headers=headers)
  File "D:\python\lib\site-packages\odps\rest.py", line 150, in post
    return self.request(url, 'post', data=data, **kwargs)
  File "D:\python\lib\site-packages\odps\rest.py", line 142, in request
    errors.throw_if_parsable(res)
  File "D:\python\lib\site-packages\odps\errors.py", line 75, in throw_if_parsable
    raise e
odps.errors.ODPSError: AccessKeyIdNotFound: RequestId: 6264CD8883C089A92B457956
ODPS-0410051:Invalid credentials - accessKeyId not found: LTAI4GHKZBiC7EPpCjuN1kNU
[2022-04-24 12:09:44,965] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:2,%22db_name%22:%221%22,%22connect_name%22:%221%22,%22db_host%22:%221%22,%22db_port%22:%221%22,%22db_user%22:%221%22,%22db_passwd%22:%221%22,%22create_time%22:%222022-04-24T10:45:05.250%22,%22update_time%22:%222022-04-24T10:45:05.250%22,%22is_delete%22:%220%22,%22db_type%22:%221%22%7D HTTP/1.1" 500 27
[2022-04-24 12:10:36,993] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:10:36,996] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:10:36,999] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:10:37,005] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:10:37,008] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:10:37,019] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:10:37,021] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:10:37,022] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:10:37,024] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:10:37,026] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:10:40,072] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:10:40,378] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:10:40,380] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:10:40,381] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:10:40,384] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:10:40,384] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:10:40,385] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:10:40,389] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:10:40,390] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:10:40,396] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:10:40,398] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:10:58,970] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:10:58,971] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:10:58,973] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:10:58,976] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:10:58,978] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:10:58,984] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:10:58,985] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:10:58,989] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:10:58,992] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:10:58,994] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:11:41,630] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:11:41,631] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:11:41,632] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:11:41,636] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:11:41,636] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:11:41,637] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:11:41,640] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:11:41,640] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:11:41,642] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:11:41,642] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:12:40,489] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:12:40,694] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:12:40,695] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:12:40,697] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:12:40,699] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:12:40,699] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:12:40,700] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:12:40,703] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:12:40,705] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:12:40,711] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:12:40,714] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:13:05,423] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:13:05,801] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:13:05,802] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:13:05,804] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:13:05,804] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:13:05,805] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:13:05,811] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:13:05,819] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:13:05,825] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:13:05,827] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:13:05,837] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:16:18,819] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:16:19,018] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:16:19,020] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:16:19,021] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:16:19,022] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:16:19,022] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:16:19,023] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:16:19,026] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:16:19,028] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:16:19,034] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:16:19,034] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:17:47,589] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:17:47,590] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:17:47,592] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:17:47,598] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:17:47,600] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:17:47,608] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:17:47,608] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:17:47,609] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:17:47,610] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:17:47,613] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:20:40,368] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:20:40,575] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:20:40,576] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:20:40,577] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:20:40,579] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:20:40,581] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:20:40,581] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:20:40,584] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:20:40,586] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:20:40,587] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:20:40,591] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 627
[2022-04-24 12:20:42,985] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:20:42,986] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:20:42,986] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:20:42,988] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:20:42,990] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 69
[2022-04-24 12:22:03,915] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:22:03,916] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:22:03,917] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:22:03,925] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:22:03,928] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 324, in get_dataworks_info
    password = db_info['password']
  File "D:\python\lib\site-packages\django\db\models\query.py", line 278, in __getitem__
    raise TypeError
TypeError
[2022-04-24 12:22:03,937] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=2 HTTP/1.1" 500 27
[2022-04-24 12:24:38,645] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:24:38,646] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:24:38,648] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:24:38,653] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:24:38,656] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 324, in get_dataworks_info
    password = list(db_info)[0]['password']
KeyError: 'password'
[2022-04-24 12:24:38,661] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 500 27
[2022-04-24 12:25:01,092] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:25:01,093] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:25:01,097] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:25:01,103] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:25:01,106] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 325, in get_dataworks_info
    password = list(db_info)[0]['password']
KeyError: 'password'
[2022-04-24 12:25:01,109] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=2 HTTP/1.1" 500 27
[2022-04-24 12:31:52,358] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:31:52,358] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 12:31:52,359] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:31:52,362] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:31:52,364] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 458
[2022-04-24 12:32:04,874] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:04,875] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addDB():
[2022-04-24 12:32:04,876] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:04,881] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:04,891] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/add HTTP/1.1" 200 87
[2022-04-24 12:32:04,904] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:04,904] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 12:32:04,906] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:04,916] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:04,923] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 463
[2022-04-24 12:32:14,188] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:14,189] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:14,190] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 12:32:14,191] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 12:32:14,192] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:14,193] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:14,196] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:14,196] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:14,199] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 12:32:14,199] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 12:32:16,014] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:16,015] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:16,016] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:32:16,016] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:32:16,017] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:16,017] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:16,020] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:16,025] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:32:16,031] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:16,034] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:32:20,755] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:32:20,757] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:32:20,758] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:32:20,760] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:32:20,764] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 327, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 53, in gettableinfo
    result = self.o.select_sql_dict(sql)
AttributeError: 'Azure_Conn' object has no attribute 'select_sql_dict'
[2022-04-24 12:32:20,767] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 500 27
[2022-04-24 12:34:38,788] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:34:38,790] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:34:38,791] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:34:38,794] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:34:38,798] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 327, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 53, in gettableinfo
    result = self.o.select_sql_dict(sql)
AttributeError: 'str' object has no attribute 'select_sql_dict'
[2022-04-24 12:34:38,804] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=2 HTTP/1.1" 500 27
[2022-04-24 12:34:42,904] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:34:42,906] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:34:42,907] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:34:42,911] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:34:45,639] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\io\sql.py", line 2020, in execute
    cur.execute(*args, **kwargs)
  File "D:\python\lib\site-packages\dbutils\steady_db.py", line 598, in tough_method
    result = method(*args, **kwargs)  # try to execute
pyodbc.ProgrammingError: ('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'table_comment'.\r\nInvalid column name 'table_comment'.\r\nInvalid column name 'table_comment'. (207) (SQLExecDirectW)")

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\io\sql.py", line 2024, in execute
    self.con.rollback()
  File "D:\python\lib\site-packages\dbutils\steady_db.py", line 441, in rollback
    self._con.rollback()
pyodbc.ProgrammingError: ('42000', '[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]111214;An attempt to complete a transaction has failed. No corresponding transaction found. (111214) (SQLEndTran)')

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 327, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 53, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 63, in select_sql_dict
    data = pd.read_sql(sql, conn)
  File "D:\python\lib\site-packages\pandas\io\sql.py", line 566, in read_sql
    return pandas_sql.read_query(
  File "D:\python\lib\site-packages\pandas\io\sql.py", line 2080, in read_query
    cursor = self.execute(*args)
  File "D:\python\lib\site-packages\pandas\io\sql.py", line 2029, in execute
    raise ex from inner_exc
pandas.io.sql.DatabaseError: Execution failed on sql: 
            SELECT
                table_name,
                table_comment 
            FROM
                information_schema.TABLES 
            WHERE
                table_name NOT LIKE '%_realtime%' 
                AND table_name NOT LIKE 'tmp%' 
                AND table_name NOT LIKE 'temp%' 
                AND table_name NOT LIKE 'viewdas%' 
                AND ( table_comment IS NOT NULL OR table_comment <> '' ) 
                AND ( table_name LIKE 'dwd%' OR table_name LIKE 'dws%' OR table_name LIKE 'rpt%' OR table_name LIKE 'dm%' 
                OR table_name LIKE 'ods%' OR table_name LIKE 'comp%' )
            
('42S22', "[42S22] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'table_comment'.\r\nInvalid column name 'table_comment'.\r\nInvalid column name 'table_comment'. (207) (SQLExecDirectW)")
unable to rollback
[2022-04-24 12:34:45,654] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 500 27
[2022-04-24 12:37:15,676] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:37:15,839] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:37:15,839] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:37:15,840] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:37:15,841] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:37:15,841] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:37:15,842] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:37:15,845] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:37:15,846] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:37:15,852] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:37:15,853] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:37:20,298] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:37:20,299] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:37:20,303] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:37:20,305] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:37:24,165] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 69
[2022-04-24 12:38:40,943] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:38:41,090] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:38:41,092] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:38:41,092] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:38:41,093] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:38:41,094] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:38:41,094] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:38:41,097] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:38:41,097] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:38:41,100] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:38:41,100] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:38:43,644] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:38:43,645] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:38:43,646] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:38:43,647] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:38:46,946] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:43:40,865] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:40,865] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:43:40,866] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:40,871] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:40,874] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:43:40,883] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:40,883] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:43:40,884] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:40,885] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:40,887] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:43:40,910] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:40,912] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:43:40,913] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:40,914] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:40,917] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:43:40,943] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:43:53,614] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:53,615] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 12:43:53,620] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:53,622] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:53,624] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 463
[2022-04-24 12:43:55,325] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:55,326] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为deleteDB():
[2022-04-24 12:43:55,327] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:55,329] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:55,336] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/db/delete?db_id=2 HTTP/1.1" 200 87
[2022-04-24 12:43:55,343] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:55,345] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 12:43:55,345] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:55,348] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:55,353] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 348
[2022-04-24 12:43:59,139] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:59,141] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:43:59,141] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 12:43:59,143] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 12:43:59,144] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:59,144] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:43:59,149] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:59,150] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:43:59,153] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 12:43:59,154] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 12:44:01,924] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:01,925] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:01,926] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:44:01,927] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:44:01,927] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:01,927] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:01,932] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:01,933] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:01,935] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:44:01,937] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:44:01,963] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:01,965] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:44:01,967] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:01,971] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:01,971] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:44:01,974] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:44:06,189] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:44:06,330] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:06,331] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:06,333] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:44:06,335] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:44:06,335] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:06,335] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:06,338] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:06,339] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:06,341] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:44:06,343] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:44:06,371] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:06,371] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:44:06,372] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:06,374] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:06,375] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:44:06,379] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:44:12,994] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:12,995] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 12:44:12,997] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:13,001] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:13,003] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 12:44:13,013] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:13,014] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 12:44:13,016] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:13,018] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:13,021] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 12:44:15,343] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:15,344] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:15,345] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:44:15,348] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:44:15,348] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:15,348] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:15,350] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:15,351] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:15,354] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:44:15,355] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:44:15,382] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:44:15,384] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:44:15,385] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:44:15,388] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:44:15,389] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:44:15,394] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:45:18,286] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:45:18,460] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:18,460] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:18,461] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:45:18,462] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:45:18,463] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:18,463] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:18,467] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:18,467] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:18,473] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:45:18,475] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:45:18,519] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:18,521] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:45:18,523] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:18,526] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:18,533] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source,is_delete=0).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:45:18,541] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:45:47,609] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:45:48,481] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:45:52,748] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:52,749] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:52,750] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 12:45:52,752] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 12:45:52,753] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:52,754] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:52,758] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:52,759] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:52,761] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 12:45:52,765] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 12:45:55,445] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:55,445] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:55,447] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:45:55,450] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:45:55,450] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:55,451] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:55,455] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:55,457] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:55,459] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:45:55,459] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:45:55,489] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:45:55,490] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:45:55,491] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:45:55,493] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:45:55,494] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source,is_delete=0).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:45:55,497] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:46:02,718] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:46:02,719] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 12:46:02,720] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:46:02,723] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:46:02,726] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 348
[2022-04-24 12:46:09,355] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:46:09,356] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 12:46:09,359] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:46:09,365] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:46:09,367] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 12:46:09,374] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:46:09,377] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 12:46:09,379] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:46:09,383] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:46:09,386] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 12:46:13,589] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:46:13,592] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:46:13,593] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:46:13,594] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:46:13,594] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:46:13,597] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:46:13,598] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:46:13,601] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:46:13,606] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:46:13,610] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:46:13,633] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:46:13,634] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:46:13,635] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:46:13,643] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:46:13,645] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 323, in get_dataworks_info
    db_info = Database.objects.filter(db_id=source,is_delete=0).values()
  File "D:\python\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 844, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\python\lib\site-packages\django\db\models\query.py", line 862, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1263, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1284, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1225, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\python\lib\site-packages\django\db\models\sql\query.py", line 1096, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 20, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\python\lib\site-packages\django\db\models\lookups.py", line 70, in get_prep_lookup
    return self.lhs.output_field.get_prep_value(self.rhs)
  File "D:\python\lib\site-packages\django\db\models\fields\__init__.py", line 965, in get_prep_value
    return int(value)
ValueError: invalid literal for int() with base 10: '{"db_id":1,"db_name":"magellanedw","connect_name":"magellan_tst","db_host":"magellan-edw-synapse-tst.sql.azuresynapse.azure.cn","db_port":"0","db_user":"0","db_passwd":"0","create_time":"2022-04-24T0
[2022-04-24 12:46:13,648] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=%7B%22db_id%22:1,%22db_name%22:%22magellanedw%22,%22connect_name%22:%22magellan_tst%22,%22db_host%22:%22magellan-edw-synapse-tst.sql.azuresynapse.azure.cn%22,%22db_port%22:%220%22,%22db_user%22:%220%22,%22db_passwd%22:%220%22,%22create_time%22:%222022-04-24T09:45:37.115%22,%22update_time%22:%222022-04-24T12:32:04.882%22,%22is_delete%22:%220%22,%22db_type%22:%22azuresqlserver%22%7D HTTP/1.1" 500 27
[2022-04-24 12:47:18,731] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:18,731] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:47:18,733] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:18,735] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:18,737] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:47:18,745] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:18,746] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:47:18,747] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:18,749] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:18,751] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:47:18,768] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:18,768] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:47:18,769] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:18,772] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:22,052] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:47:30,194] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:30,196] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:47:30,197] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:30,200] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:30,201] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 326, in get_dataworks_info
    odps = dataExploration(list(db_info)[0])
IndexError: list index out of range
[2022-04-24 12:47:30,203] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=2 HTTP/1.1" 500 27
[2022-04-24 12:47:32,115] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:32,116] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:47:32,117] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:32,119] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:34,418] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:47:34,617] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:34,619] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:47:34,620] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:34,624] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:34,629] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:47:34,641] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:34,643] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:47:34,644] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:34,660] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:34,668] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 632
[2022-04-24 12:47:34,736] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:47:34,738] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:47:34,740] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:47:34,743] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:47:36,477] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:49:05,474] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:49:05,737] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:49:05,738] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:49:05,739] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:49:05,740] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:49:05,740] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:49:05,740] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:49:05,746] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:49:05,748] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:49:05,755] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:49:05,756] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:49:05,824] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:49:05,825] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:49:05,825] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:49:05,828] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:49:09,116] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:49:49,912] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:49:50,062] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:49:50,063] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:49:50,064] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:49:50,065] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:49:50,066] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:49:50,067] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:49:50,068] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:49:50,071] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:49:50,073] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:49:50,076] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:49:50,101] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:49:50,102] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:49:50,102] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:49:50,105] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:49:52,591] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:51:01,179] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:51:01,364] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:01,364] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:01,366] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:51:01,367] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:51:01,367] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:01,367] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:01,373] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:51:01,373] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:51:01,377] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:51:01,378] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:51:01,441] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:01,442] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:51:01,442] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:01,444] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:51:02,993] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:51:24,243] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:24,247] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 12:51:24,260] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:24,278] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:51:24,308] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkscolumninfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 343, in get_dataworks_column_info
    odps = dataExploration(user, password, source + '_dev')
TypeError: unsupported operand type(s) for +: 'int' and 'str'
[2022-04-24 12:51:24,313] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 500 27
[2022-04-24 12:51:58,029] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:51:58,586] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:58,587] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:58,589] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:51:58,623] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:51:58,631] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:58,632] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:58,645] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:51:58,653] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:51:58,666] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:51:58,673] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:51:58,815] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:51:58,817] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:51:58,820] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:51:58,826] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:52:00,400] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:54:42,958] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:54:42,959] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 12:54:42,959] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:54:42,962] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:54:42,963] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkscolumninfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 343, in get_dataworks_column_info
    odps = dataExploration(user, password, source + '_dev')
TypeError: unsupported operand type(s) for +: 'int' and 'str'
[2022-04-24 12:54:42,966] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 500 27
[2022-04-24 12:54:45,807] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:54:46,037] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:54:46,038] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:54:46,039] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:54:46,041] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:54:46,041] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:54:46,045] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:54:46,056] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:54:46,073] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:54:46,074] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:54:46,077] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:54:46,157] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:54:46,159] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:54:46,160] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:54:46,166] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:54:48,944] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:57:47,319] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:57:47,542] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:57:47,544] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:57:47,544] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:57:47,545] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:57:47,545] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:57:47,546] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:57:47,553] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:57:47,555] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:57:47,560] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:57:47,562] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:57:47,591] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:57:47,592] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:57:47,592] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:57:47,596] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:57:51,055] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:58:04,173] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:58:04,173] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 12:58:04,173] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:58:04,175] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:58:04,178] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkscolumninfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 344, in get_dataworks_column_info
    odps = dataExploration(db_info)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 38, in __init__
    self.db_type = db_info['db_type']
  File "D:\python\lib\site-packages\django\db\models\query.py", line 278, in __getitem__
    raise TypeError
TypeError
[2022-04-24 12:58:04,192] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 500 27
[2022-04-24 12:58:05,271] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:58:05,272] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 12:58:05,272] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:58:05,274] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:58:05,277] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkscolumninfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 344, in get_dataworks_column_info
    odps = dataExploration(db_info)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 38, in __init__
    self.db_type = db_info['db_type']
  File "D:\python\lib\site-packages\django\db\models\query.py", line 278, in __getitem__
    raise TypeError
TypeError
[2022-04-24 12:58:05,280] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 500 27
[2022-04-24 12:58:59,387] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:58:59,387] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 12:58:59,388] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:58:59,391] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:59:02,747] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 768
[2022-04-24 12:59:32,863] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 12:59:33,080] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:59:33,083] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:59:33,084] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 12:59:33,084] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 12:59:33,085] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:59:33,085] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:59:33,089] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:59:33,089] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:59:33,093] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 12:59:33,127] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 12:59:33,164] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:59:33,166] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 12:59:33,167] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:59:33,169] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:59:36,287] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 12:59:52,384] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 12:59:52,386] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 12:59:52,386] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 12:59:52,391] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 12:59:54,385] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 1452
[2022-04-24 13:00:28,826] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:28,827] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:00:28,827] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:28,829] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:28,832] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 13:00:28,837] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:28,838] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:00:28,839] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:28,841] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:28,843] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:00:28,857] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:28,858] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:00:28,858] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:28,860] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:30,414] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:00:41,428] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:41,428] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 13:00:41,429] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:41,435] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:42,572] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 2859
[2022-04-24 13:00:51,770] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:51,771] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 13:00:51,772] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:51,776] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:51,791] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 200 69
[2022-04-24 13:00:51,799] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:51,800] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:00:51,801] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:51,809] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:51,814] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:00:51,823] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:00:51,825] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:00:51,825] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:00:51,827] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:00:51,830] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:06:04,649] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:06:04,650] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:06:04,650] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2022-04-24 13:06:04,651] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:06:04,651] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:06:04,651] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:06:04,654] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:06:04,654] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:06:04,668] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:06:04,679] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/dataexplorationjob
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 526, in dataexplorationjob
    job = datacheck(source, environment, environmentdes, user, password)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataCheck.py", line 134, in __init__
    self.Probejob = fieldProbeJob(source, self.environment, self.environmentdes, user, password)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataCheck.py", line 33, in __init__
    self.odps = dataExploration(self.user, self.password, self.project + '_dev')
TypeError: unsupported operand type(s) for +: 'int' and 'str'
[2022-04-24 13:06:04,685] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 500 27
[2022-04-24 13:11:32,975] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:32,975] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:11:32,976] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:32,979] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:32,981] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:11:39,497] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:39,498] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:11:39,499] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:39,507] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:39,511] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:11:39,516] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:39,517] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:11:39,517] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:39,521] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:39,523] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:11:39,549] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:39,550] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:11:39,551] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:39,556] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:41,158] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:41,159] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:11:41,160] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:41,161] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:41,163] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:11:42,952] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:11:43,251] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:43,252] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:43,252] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:11:43,253] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:11:43,254] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:43,254] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:43,256] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:43,259] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:43,260] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:11:43,262] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:11:43,303] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:43,305] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:11:43,305] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:43,307] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:45,865] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:11:48,843] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:48,843] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexphistory():
[2022-04-24 13:11:48,844] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:48,847] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:48,849] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexphistory?tableid=1 HTTP/1.1" 200 81
[2022-04-24 13:11:52,668] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:52,669] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:11:52,669] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:52,671] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:52,673] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:11:57,268] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:57,269] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:11:57,270] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:57,272] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:57,275] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:11:57,283] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:57,284] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:11:57,284] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:57,286] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:57,288] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:11:57,314] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:11:57,315] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:11:57,315] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:11:57,317] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:11:59,748] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:12:03,848] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:03,849] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 13:12:03,850] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:03,856] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:03,860] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 13:12:08,306] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:08,307] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:08,308] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:12:08,308] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:12:08,308] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:08,308] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:08,310] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:08,311] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:08,314] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:12:08,315] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:12:08,341] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:08,342] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:12:08,342] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:08,345] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:10,004] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:12:11,298] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:11,298] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 13:12:11,299] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:11,304] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:11,307] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 13:12:11,309] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:11,311] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 13:12:11,311] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:11,314] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:11,318] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 13:12:14,464] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:14,465] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:14,468] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:12:14,469] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:12:14,469] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:14,469] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:14,471] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:14,473] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:14,474] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:12:14,475] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:12:14,498] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:14,499] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:12:14,499] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:14,501] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:16,688] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:12:17,323] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:17,325] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:12:17,325] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:17,326] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:17,329] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:12:22,646] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:22,647] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:22,648] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 13:12:22,649] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 13:12:22,649] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:22,650] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:22,653] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:22,653] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:22,658] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 13:12:22,660] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 13:12:24,938] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:24,939] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:24,939] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:12:24,941] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:12:24,941] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:24,941] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:24,943] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:24,946] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:24,948] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:12:24,950] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:12:24,982] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:24,983] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:12:24,983] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:24,985] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:27,544] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:12:31,238] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:12:31,239] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:12:31,239] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:12:31,243] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:12:31,247] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:14:04,201] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 13:14:04,449] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:14:04,450] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:14:04,451] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:14:04,454] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:14:04,458] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:14:09,479] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=99d62f1028bbb5650a25cfb0370f872c HTTP/1.1" 200 239
[2022-04-24 13:14:09,708] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:14:09,710] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:14:09,711] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:14:09,711] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:14:09,712] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:14:09,712] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:14:09,715] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:14:09,716] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:14:09,720] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:14:09,724] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:14:09,767] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:14:09,768] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:14:09,768] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:14:09,771] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:14:11,401] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:14:11,402] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 13:14:11,402] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:14:11,405] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:14:11,409] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 13:14:12,851] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:19:09,955] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:19:09,956] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:19:09,956] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:19:09,956] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:19:09,956] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:19:09,957] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:19:09,960] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:19:09,960] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:19:09,966] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:19:09,966] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:19:09,983] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:19:09,984] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:19:09,984] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:19:09,986] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:19:10,938] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:19:10,939] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 13:19:10,939] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:19:10,941] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:19:10,945] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 13:19:13,462] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:19:21,633] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:19:21,634] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为runtestcase():
[2022-04-24 13:19:21,634] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:19:21,638] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:19:21,639] [runTestCase.py:27] [runTestCase:__init__] [INFO]- 连接数据库
[2022-04-24 13:19:21,642] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/runtestcase
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 725, in runtestcase
    job = runtestcasejob(user, password)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\runTestCase.py", line 31, in __init__
    self.odps = dataExploration(self.user, self.password, self.project + '_dev')
TypeError: __init__() takes 2 positional arguments but 4 were given
[2022-04-24 13:19:21,647] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/runtestcase HTTP/1.1" 500 27
[2022-04-24 13:19:21,654] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:19:21,657] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 13:19:21,657] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:19:21,661] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:19:21,663] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 13:29:40,511] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:29:40,513] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:29:40,515] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:29:40,517] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:29:40,518] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:29:40,520] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:29:40,529] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:29:40,530] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:29:40,534] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:29:40,537] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:29:40,553] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:29:40,554] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:29:40,554] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:29:40,556] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:29:40,721] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:29:40,723] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 13:29:40,724] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:29:40,729] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:29:40,733] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 13:29:43,707] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 13:30:08,185] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:30:08,189] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 13:30:08,190] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:30:08,193] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:30:08,198] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 13:30:08,206] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:30:08,208] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 13:30:08,209] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:30:08,211] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:30:08,214] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 13:30:08,227] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 13:30:08,228] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 13:30:08,229] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 13:30:08,234] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 13:30:10,760] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:18:28,180] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/logout HTTP/1.1" 200 69
[2022-04-24 14:18:34,860] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e; sidebarStatus=0', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x0000017F5614C160>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-24 14:18:34,867] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-24 14:18:34,868] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-24 14:18:34,869] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-24 14:18:34,879] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2022-04-24 14:18:34,911] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=2ceaaefde897554f56300628770f5e31 HTTP/1.1" 200 239
[2022-04-24 14:18:35,009] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:35,011] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:18:35,012] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:35,020] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:35,039] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 14:18:35,055] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:35,055] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:18:35,057] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:35,064] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:35,070] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:18:35,103] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:35,105] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:18:35,105] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:35,110] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:40,083] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:18:41,358] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:41,360] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:41,361] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为indexData():
[2022-04-24 14:18:41,361] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为indexStatistics():
[2022-04-24 14:18:41,361] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:41,365] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:41,374] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:41,376] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:41,388] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/index/indexStatistics HTTP/1.1" 200 310
[2022-04-24 14:18:41,389] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/index/total HTTP/1.1" 200 156
[2022-04-24 14:18:42,984] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:43,000] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:18:43,002] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:43,006] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:43,006] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:43,009] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:18:43,010] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:18:43,011] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:43,025] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:43,041] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:18:44,449] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:18:44,450] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:18:44,453] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:18:44,457] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:18:44,460] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:19:03,480] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:03,481] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:19:03,484] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:03,490] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:03,491] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:03,492] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:03,493] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:19:03,493] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:19:03,494] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:03,495] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:19:03,495] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:03,495] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:03,497] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:03,501] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:19:03,511] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:03,520] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:03,522] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:03,532] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:19:03,532] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:19:03,532] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:19:06,057] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:06,058] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:06,059] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:19:06,060] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:19:06,060] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:06,061] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:06,065] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:06,065] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:06,070] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:19:06,070] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:19:06,347] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:06,348] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:06,349] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:19:06,349] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:19:06,350] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:06,350] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:06,354] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:06,355] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:06,358] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:19:06,358] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:19:06,653] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:06,655] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:06,656] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:19:06,656] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:19:06,656] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:06,657] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:06,660] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:06,662] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:06,668] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:19:06,668] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:19:09,544] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:09,545] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchPlan():
[2022-04-24 14:19:09,547] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:09,553] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:09,557] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/plan/search HTTP/1.1" 200 138
[2022-04-24 14:19:11,367] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:11,370] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:11,373] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:11,377] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:19:11,377] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为envSearch():
[2022-04-24 14:19:11,378] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 14:19:11,378] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:11,378] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:11,380] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:11,387] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:11,387] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:11,388] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:11,392] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/env/search HTTP/1.1" 200 81
[2022-04-24 14:19:11,393] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:19:11,394] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 277
[2022-04-24 14:19:17,116] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:17,119] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchPlan():
[2022-04-24 14:19:17,120] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:17,124] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:17,129] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/plan/search HTTP/1.1" 200 138
[2022-04-24 14:19:17,619] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:17,620] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:17,621] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:19:17,621] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:19:17,622] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:17,622] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:17,634] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:17,638] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:17,644] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:19:17,646] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:19:17,655] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:17,657] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:17,658] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:19:17,658] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:19:17,659] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:17,659] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:17,663] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:17,667] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:17,671] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:19:17,673] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:19:20,172] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:20,180] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:20,183] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:19:20,184] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:19:20,184] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:20,185] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:20,189] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:20,190] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:20,199] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 14:19:20,200] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:19:20,233] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:20,234] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:19:20,235] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:20,239] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:22,220] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:22,221] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:22,224] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:19:22,224] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:19:22,225] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:22,226] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:22,229] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:22,230] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:22,233] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:19:22,235] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:19:22,281] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:19:26,980] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:26,982] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:26,983] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:19:26,983] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:19:26,984] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:26,990] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:26,994] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:26,996] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:26,999] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 14:19:26,999] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:19:27,040] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:27,043] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:19:27,046] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:27,050] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:29,059] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:19:39,292] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:39,294] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 14:19:39,294] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:39,297] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:40,630] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 4118
[2022-04-24 14:19:51,868] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:51,870] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:51,870] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 14:19:51,871] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:19:51,873] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:51,874] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:51,879] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:51,879] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:51,884] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 14:19:51,903] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 200 69
[2022-04-24 14:19:52,001] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:52,002] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:19:52,002] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:52,010] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:52,015] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:19:54,028] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:19:54,031] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 14:19:54,033] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:19:54,036] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:19:54,045] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=2 HTTP/1.1" 200 135
[2022-04-24 14:20:03,602] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:03,603] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:20:03,603] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:03,608] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:03,610] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:20:03,626] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:03,627] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:20:03,627] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:03,631] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:03,636] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:20:10,020] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:10,021] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:20:10,022] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:10,024] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:10,027] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:20:10,037] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:10,040] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:20:10,042] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:10,051] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:10,057] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:20:12,075] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:12,077] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:12,079] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:20:12,081] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:20:12,081] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:12,081] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:12,084] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:12,085] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:12,089] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:20:12,089] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:20:12,127] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:12,134] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:20:12,137] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:12,153] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:13,180] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:13,183] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 14:20:13,183] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:13,186] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:13,189] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 14:20:13,806] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:20:28,607] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:28,609] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:20:28,609] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:28,611] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:28,615] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:20:28,619] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:28,620] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:20:28,621] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:28,628] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:28,632] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:20:28,663] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:28,664] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:20:28,665] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:28,668] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:30,793] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:20:33,047] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:33,050] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 14:20:33,051] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:33,058] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:33,062] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=1 HTTP/1.1" 200 135
[2022-04-24 14:20:46,091] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:46,094] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:20:46,096] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:46,102] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:46,104] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:20:46,116] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:46,117] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:20:46,117] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:46,119] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:46,123] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:20:48,086] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:48,090] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:48,093] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:20:48,093] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:20:48,094] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:48,095] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:48,100] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:48,101] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:48,104] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:20:48,106] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:20:48,141] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:48,143] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:20:48,144] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:48,148] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:50,671] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:20:57,114] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:57,115] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:20:57,116] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:20:57,117] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-04-24 14:20:57,118] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:57,119] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:20:57,128] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:57,128] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:20:57,135] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getquestioninfo HTTP/1.1" 200 138
[2022-04-24 14:20:57,136] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:20:57,939] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 83
[2022-04-24 14:20:57,942] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/ruledistribution
Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3621, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 136, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 163, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'category'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 240, in rule_distribution
    result = Data_Process().dataworks_category(_data)
  File "D:\project\AutomationPlatformDjango\data_monior\data_monior\Data_Process.py", line 83, in dataworks_category
    table_schema = list(set(df['category'].values.tolist()))
  File "D:\python\lib\site-packages\pandas\core\frame.py", line 3505, in __getitem__
    indexer = self.columns.get_loc(key)
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3623, in get_loc
    raise KeyError(key) from err
KeyError: 'category'
[2022-04-24 14:20:57,944] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 83
[2022-04-24 14:20:57,959] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2022-04-24 14:20:57,970] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 500 27
[2022-04-24 14:21:10,702] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:10,703] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:21:10,706] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:10,714] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:10,721] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:21:10,729] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:10,730] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:21:10,734] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:10,741] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:10,744] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:21:49,764] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:49,765] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:21:49,765] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:49,768] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:49,771] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:21:49,781] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:49,783] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:21:49,786] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:49,796] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:49,810] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:21:49,874] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:49,877] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:21:49,883] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:49,891] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:49,902] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:21:49,921] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:49,924] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:21:49,925] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:49,937] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:49,944] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:21:50,753] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:50,754] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:50,754] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:21:50,754] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:21:50,754] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:50,755] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:50,759] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:50,760] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:50,767] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:21:50,768] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:21:52,387] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:52,406] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:21:52,407] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:52,414] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:52,422] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:21:59,537] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:21:59,538] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:21:59,540] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:21:59,547] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:21:59,550] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:02,400] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:02,401] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:22:02,401] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:02,408] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:02,409] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:05,051] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:05,053] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:22:05,055] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:05,057] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:05,060] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:06,479] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:06,480] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:22:06,481] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:06,483] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:06,485] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:07,008] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:07,008] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:22:07,009] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:07,012] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:07,014] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:11,423] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:11,424] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为moduleSeach():
[2022-04-24 14:22:11,425] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:11,428] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:11,429] [ModuleView.py:32] [ModuleView:moduleSeach] [ERROR]- 说明没有传module名称，module_name置为空
[2022-04-24 14:22:11,432] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/module/search?prj_id=1 HTTP/1.1" 200 144
[2022-04-24 14:22:18,676] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:18,677] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceAdd():
[2022-04-24 14:22:18,678] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:18,680] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:18,707] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/add HTTP/1.1" 200 81
[2022-04-24 14:22:18,726] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:18,728] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:22:18,729] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:18,735] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:18,738] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:21,065] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:21,066] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:22:21,068] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:21,071] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:21,073] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 138
[2022-04-24 14:22:24,752] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:24,753] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:24,754] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:24,757] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:24,760] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:24,778] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:24,782] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:22:24,782] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:24,789] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:24,792] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:22:24,806] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:24,806] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:24,807] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:24,811] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:24,819] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:24,824] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:24,825] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:24,825] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:24,828] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:24,840] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:27,635] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:27,639] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:27,640] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:27,642] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:27,644] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:27,650] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:27,651] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:27,652] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:27,654] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:27,656] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:27,656] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:27,658] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:27,657] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:22:27,657] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:27,663] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:27,670] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:27,673] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:27,673] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:27,686] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:22:27,686] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:29,633] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:29,634] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:29,635] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:22:29,636] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-04-24 14:22:29,636] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:29,637] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:29,650] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:29,651] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:29,654] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:22:29,654] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getquestioninfo HTTP/1.1" 200 138
[2022-04-24 14:22:31,926] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:31,927] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:31,928] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:22:31,928] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:22:31,929] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:31,930] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:31,932] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:31,933] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:31,936] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:22:31,936] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:22:32,232] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:32,250] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchPlan():
[2022-04-24 14:22:32,252] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:32,260] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:32,267] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/plan/search HTTP/1.1" 200 138
[2022-04-24 14:22:33,868] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:33,869] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:33,871] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:33,874] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:22:33,875] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:33,876] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:33,881] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:33,882] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:33,886] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:33,886] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:22:33,899] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:33,900] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:33,901] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:33,905] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:33,917] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:33,916] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:33,922] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:33,927] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:33,933] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:33,937] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:35,208] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:35,210] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:35,210] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:35,211] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:35,211] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:35,211] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:35,215] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:35,215] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:35,218] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:35,219] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:35,593] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:35,594] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:35,595] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:35,595] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:35,595] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:35,595] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:35,599] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:35,599] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:35,603] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:35,603] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:35,920] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:35,921] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:35,923] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:35,924] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:35,924] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:35,925] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:35,928] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:35,929] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:35,931] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:35,933] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:36,434] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:36,434] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:36,435] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:36,438] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:36,442] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:37,229] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:37,230] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:37,232] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:37,236] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:37,240] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:37,629] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:37,630] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:37,631] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:37,633] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:37,634] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:39,304] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:39,305] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:39,306] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:22:39,307] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:39,307] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:39,309] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:39,316] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:39,319] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:39,322] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:22:39,327] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:41,123] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:41,127] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:41,128] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:41,128] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:41,130] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:41,131] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:41,131] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:22:41,133] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:41,134] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:41,134] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:41,135] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:41,135] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:41,135] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:41,142] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:41,143] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:41,143] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:41,145] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:41,146] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:22:41,153] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:41,154] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:41,994] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:41,995] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:41,995] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:41,998] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:42,000] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:44,231] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:44,232] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:44,232] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:44,237] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:44,239] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:44,965] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:44,966] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:44,967] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:44,971] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:44,977] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:45,611] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:45,612] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:45,612] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:45,615] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:45,618] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:46,962] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:46,963] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:46,963] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:46,966] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:46,972] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:46,983] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:46,985] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:46,986] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:46,989] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:46,994] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:47,389] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:47,390] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:47,391] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:47,391] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:47,391] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:47,392] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:47,394] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:47,395] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:47,399] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:47,400] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:47,727] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:47,728] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:47,728] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:47,729] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:22:47,729] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:47,729] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:47,733] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:47,735] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:47,739] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:22:47,739] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:22:49,210] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:49,210] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:49,211] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:22:49,212] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:49,213] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:49,213] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:49,219] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:49,220] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:49,224] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:22:49,225] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:58,056] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:58,056] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:22:58,057] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:22:58,058] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:22:58,058] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:58,060] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:22:58,071] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:58,071] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:22:58,074] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:22:58,076] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:23:02,141] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:02,143] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:23:02,146] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:02,148] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:02,149] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:02,149] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:23:02,149] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:23:02,151] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:02,152] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:02,153] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:02,154] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:02,156] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:02,159] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:23:02,163] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:23:02,175] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:23:02,181] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:02,183] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:23:02,184] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:02,188] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:02,198] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:23:07,226] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:07,231] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:23:07,232] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:07,237] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:07,246] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 679
[2022-04-24 14:23:07,254] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:07,257] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:23:07,258] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:07,263] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:07,268] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:23:10,954] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:10,955] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:10,959] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:23:10,960] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:23:10,961] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:10,961] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:10,966] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:10,971] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:23:10,969] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:10,982] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:23:10,986] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:10,987] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:23:10,988] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:10,995] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:10,995] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:10,997] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:23:10,997] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:10,998] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:23:11,001] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:11,011] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:23:12,453] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:12,458] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:12,458] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:23:12,458] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:23:12,460] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:12,460] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:12,467] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:12,468] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:12,472] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:23:12,474] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:23:15,324] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:15,325] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为moduleSeach():
[2022-04-24 14:23:15,326] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:15,327] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:15,328] [ModuleView.py:32] [ModuleView:moduleSeach] [ERROR]- 说明没有传module名称，module_name置为空
[2022-04-24 14:23:15,330] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/module/search?prj_id=1 HTTP/1.1" 200 144
[2022-04-24 14:23:21,022] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:21,025] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 14:23:21,026] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:21,029] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:21,032] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 679
[2022-04-24 14:23:26,436] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:26,438] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 14:23:26,438] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:26,446] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:26,450] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 277
[2022-04-24 14:23:26,455] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:26,456] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为paramSearch():
[2022-04-24 14:23:26,457] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:26,459] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:26,462] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/param/search HTTP/1.1" 200 81
[2022-04-24 14:23:44,760] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:44,762] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:23:44,763] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:44,766] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:44,769] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:23:44,781] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:44,782] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:23:44,782] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:44,784] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:44,789] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:23:44,799] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:44,800] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:23:44,801] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:44,804] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:44,811] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:23:44,831] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:44,832] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:23:44,832] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:44,836] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:44,846] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:23:51,444] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:51,444] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:23:51,445] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:23:51,446] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:23:51,446] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:51,447] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:23:51,450] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:51,451] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:23:51,457] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:23:51,457] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:24:15,309] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:15,312] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:24:15,313] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:15,324] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:15,334] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:24:15,346] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:15,349] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:24:15,350] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:15,359] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:15,363] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:24:18,974] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:18,977] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:18,978] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-24 14:24:18,978] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-24 14:24:18,979] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:18,980] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:18,985] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:18,988] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:18,994] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/case/create/caseSearch HTTP/1.1" 200 138
[2022-04-24 14:24:18,995] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/interface/getProjectInfo HTTP/1.1" 200 177
[2022-04-24 14:24:19,010] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:19,012] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:24:19,014] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:19,018] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:19,020] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 14:24:19,022] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:19,025] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:19,030] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 210
[2022-04-24 14:24:19,033] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:19,049] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 14:24:19,203] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:19,205] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchPlan():
[2022-04-24 14:24:19,208] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:19,212] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:19,216] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/plan/search HTTP/1.1" 200 138
[2022-04-24 14:24:20,881] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:20,883] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:20,885] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:24:20,886] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:24:20,888] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:20,889] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:20,895] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:20,898] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:20,911] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:24:20,911] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:24:22,090] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:22,091] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:22,093] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:24:22,093] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:24:22,095] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:22,096] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:22,107] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:22,109] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:22,117] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:24:22,118] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:24:22,142] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:24:22,142] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:24:22,144] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:24:22,147] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:24:24,293] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/DayPassFail?type=LineChart HTTP/1.1" 200 83
[2022-04-24 14:24:24,293] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/monior/getpiecharts HTTP/1.1" 200 83
[2022-04-24 14:24:24,298] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2022-04-24 14:24:24,330] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/ruledistribution
Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3621, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 136, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 163, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'category'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 240, in rule_distribution
    result = Data_Process().dataworks_category(_data)
  File "D:\project\AutomationPlatformDjango\data_monior\data_monior\Data_Process.py", line 83, in dataworks_category
    table_schema = list(set(df['category'].values.tolist()))
  File "D:\python\lib\site-packages\pandas\core\frame.py", line 3505, in __getitem__
    indexer = self.columns.get_loc(key)
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3623, in get_loc
    raise KeyError(key) from err
KeyError: 'category'
[2022-04-24 14:24:24,340] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 500 27
[2022-04-24 14:24:24,902] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:26:19,141] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/ruledistribution
Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3621, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 136, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 163, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'category'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 240, in rule_distribution
    result = Data_Process().dataworks_category(_data)
  File "D:\project\AutomationPlatformDjango\data_monior\data_monior\Data_Process.py", line 83, in dataworks_category
    table_schema = list(set(df['category'].values.tolist()))
  File "D:\python\lib\site-packages\pandas\core\frame.py", line 3505, in __getitem__
    indexer = self.columns.get_loc(key)
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3623, in get_loc
    raise KeyError(key) from err
KeyError: 'category'
[2022-04-24 14:26:19,142] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2022-04-24 14:26:19,151] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/monior/ruledistribution?table_schema=nczalgo HTTP/1.1" 500 27
[2022-04-24 14:26:20,250] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/ruledistribution
Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3621, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 136, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 163, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'category'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 240, in rule_distribution
    result = Data_Process().dataworks_category(_data)
  File "D:\project\AutomationPlatformDjango\data_monior\data_monior\Data_Process.py", line 83, in dataworks_category
    table_schema = list(set(df['category'].values.tolist()))
  File "D:\python\lib\site-packages\pandas\core\frame.py", line 3505, in __getitem__
    indexer = self.columns.get_loc(key)
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3623, in get_loc
    raise KeyError(key) from err
KeyError: 'category'
[2022-04-24 14:26:20,253] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2022-04-24 14:26:20,256] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/monior/ruledistribution?table_schema=ncz_adm HTTP/1.1" 500 27
[2022-04-24 14:26:21,380] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/monior/ruledistribution
Traceback (most recent call last):
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3621, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 136, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 163, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'category'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 240, in rule_distribution
    result = Data_Process().dataworks_category(_data)
  File "D:\project\AutomationPlatformDjango\data_monior\data_monior\Data_Process.py", line 83, in dataworks_category
    table_schema = list(set(df['category'].values.tolist()))
  File "D:\python\lib\site-packages\pandas\core\frame.py", line 3505, in __getitem__
    indexer = self.columns.get_loc(key)
  File "D:\python\lib\site-packages\pandas\core\indexes\base.py", line 3623, in get_loc
    raise KeyError(key) from err
KeyError: 'category'
[2022-04-24 14:26:21,381] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/monior/gethistory HTTP/1.1" 200 138
[2022-04-24 14:26:21,387] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/monior/ruledistribution?table_schema=nczbigdata HTTP/1.1" 500 27
[2022-04-24 14:31:36,134] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:31:36,138] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:31:36,140] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:31:36,140] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:31:36,140] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:31:36,141] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:31:36,147] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:31:36,147] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:31:36,152] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:31:36,152] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:32:15,519] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:32:15,520] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:32:15,521] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:32:15,525] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:32:15,528] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:32:15,539] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:32:15,541] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:32:15,543] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:32:15,548] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:32:15,555] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:36:45,179] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:45,181] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:45,182] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:36:45,184] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:36:45,185] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:45,186] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:45,191] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:45,195] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:45,196] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:36:45,202] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:36:47,284] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:47,285] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:47,286] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:36:47,287] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:36:47,288] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:47,288] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:47,291] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:47,291] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:47,297] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:36:47,298] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:36:47,341] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:47,342] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:36:47,342] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:47,344] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:50,535] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:36:54,854] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:54,856] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 14:36:54,857] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:54,859] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:54,866] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 14:36:55,580] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:55,581] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:55,581] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:36:55,582] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:36:55,583] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:55,583] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:55,586] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:55,587] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:55,590] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:36:55,592] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:36:55,606] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:36:55,607] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:36:55,608] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:36:55,612] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:36:58,529] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:37:28,235] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:37:28,237] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getexplorationres():
[2022-04-24 14:37:28,237] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:37:28,243] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:37:28,251] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getexplorationres?tableid=2 HTTP/1.1" 200 135
[2022-04-24 14:38:03,615] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:03,616] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:38:03,616] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:03,621] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:03,626] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:38:03,633] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:03,634] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:38:03,635] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:03,639] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:03,647] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:38:14,576] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:14,578] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:38:14,579] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:14,584] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:14,593] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:38:14,606] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:14,607] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:38:14,609] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:14,612] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:14,616] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:38:23,283] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:23,285] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:38:23,285] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:23,290] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:23,292] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:38:23,304] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:23,305] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:38:23,306] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:23,310] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:23,313] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:38:35,999] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:36,000] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:38:36,000] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:36,002] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:36,008] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:38:36,017] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:38:36,018] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:38:36,019] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:38:36,023] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:38:36,030] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:39:05,817] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:39:05,818] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:39:05,819] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:39:05,821] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:39:05,827] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:39:05,836] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:39:05,837] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:39:05,838] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:39:05,839] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:39:05,847] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:39:08,078] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:39:08,079] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:39:08,079] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:39:08,080] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:39:08,080] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:39:08,080] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:39:08,083] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:39:08,085] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:39:08,089] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:39:08,090] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:39:08,137] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:39:08,138] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:39:08,151] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:39:08,175] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:39:08,961] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:39:08,962] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 14:39:08,962] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:39:08,965] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:39:08,968] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 14:39:10,973] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:44:26,280] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:44:26,282] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 14:44:26,282] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:44:26,287] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:44:26,293] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 348
[2022-04-24 14:46:53,311] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:46:53,313] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:46:53,314] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:46:53,315] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:46:53,315] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:46:53,316] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:46:53,319] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:46:53,320] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:46:53,325] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:46:53,327] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:46:58,834] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:46:58,835] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:46:58,835] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:46:58,839] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:46:58,845] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:46:58,850] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:46:58,851] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:46:58,851] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:46:58,854] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:46:58,859] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:46:58,899] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:46:58,900] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:46:58,901] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:46:58,903] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:01,950] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:47:05,994] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:05,995] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:05,996] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:47:05,997] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:47:05,997] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:05,997] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:06,009] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:06,009] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:06,016] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:47:06,016] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:47:09,312] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:09,313] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:09,314] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:47:09,314] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:47:09,314] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:09,316] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:09,323] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:09,325] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:09,327] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:47:09,327] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:47:11,445] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:11,446] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:11,447] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:47:11,447] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:47:11,447] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:11,447] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:11,453] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:11,455] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:11,458] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:47:11,459] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:47:11,478] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:11,479] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:47:11,480] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:11,486] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:13,187] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:47:48,926] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:47:48,928] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 14:47:48,929] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:47:48,939] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:47:48,944] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 348
[2022-04-24 14:53:15,660] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:15,664] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:53:15,665] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:15,672] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:15,677] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:53:15,683] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:15,685] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:53:15,685] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:15,688] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:15,692] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:53:33,301] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:33,303] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 14:53:33,304] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:33,309] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:33,317] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 348
[2022-04-24 14:53:34,362] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:34,363] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchRebot():
[2022-04-24 14:53:34,363] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:34,366] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:34,369] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/robot/search HTTP/1.1" 200 138
[2022-04-24 14:53:35,485] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:35,488] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为envSearch():
[2022-04-24 14:53:35,488] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:35,494] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:35,496] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/env/search HTTP/1.1" 200 138
[2022-04-24 14:53:36,040] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:36,042] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:36,044] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-24 14:53:36,045] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchRebot():
[2022-04-24 14:53:36,045] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:36,045] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:36,048] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:36,049] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:36,059] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/project/search HTTP/1.1" 200 502
[2022-04-24 14:53:36,059] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/robot/search HTTP/1.1" 200 81
[2022-04-24 14:53:36,920] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:36,925] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-24 14:53:36,927] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:36,932] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:36,936] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/bd/search HTTP/1.1" 200 281
[2022-04-24 14:53:37,694] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:37,695] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为emailSearch():
[2022-04-24 14:53:37,696] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:37,701] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:37,711] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/email/search HTTP/1.1" 200 138
[2022-04-24 14:53:37,713] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:37,719] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为emailSendEmail():
[2022-04-24 14:53:37,720] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:37,731] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:37,735] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/email/sendEmail HTTP/1.1" 200 81
[2022-04-24 14:53:38,784] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/mslog/search HTTP/1.1" 200 138
[2022-04-24 14:53:39,751] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:39,752] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userSearch():
[2022-04-24 14:53:39,753] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:39,759] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:39,763] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/user/search HTTP/1.1" 200 496
[2022-04-24 14:53:41,243] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:53:41,243] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 14:53:41,244] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:53:41,250] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:53:41,256] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/db/search HTTP/1.1" 200 348
[2022-04-24 14:54:02,252] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:02,253] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:02,255] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:54:02,255] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:54:02,255] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:02,256] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:02,263] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:02,264] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:02,267] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:54:02,267] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:54:05,695] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:05,696] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:05,697] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:54:05,697] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:54:05,698] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:05,698] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:05,701] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:05,701] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:05,705] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:54:05,706] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:54:05,732] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:05,733] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:54:05,734] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:05,737] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:07,723] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:07,733] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:07,735] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:54:07,736] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:54:07,736] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:07,736] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:07,744] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:07,745] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:07,752] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:54:07,760] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:54:08,968] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:08,968] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:08,969] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:54:08,970] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:54:08,970] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:08,972] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:08,977] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:08,977] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:08,983] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:54:08,985] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:54:09,155] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:54:09,164] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:09,165] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:54:09,165] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:09,168] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:11,138] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:54:11,140] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-24 14:54:11,141] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:54:11,143] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:54:11,146] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestcase HTTP/1.1" 200 69
[2022-04-24 14:54:11,192] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 14:56:07,070] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:56:07,071] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 14:56:07,071] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:56:07,078] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:56:07,080] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 14:56:07,086] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:56:07,087] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 14:56:07,087] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:56:07,091] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:56:07,097] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 14:57:23,189] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:57:23,191] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 14:57:23,193] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:57:23,206] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:57:23,208] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 14:57:23,211] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:57:23,213] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:57:23,233] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 14:57:23,239] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:57:23,248] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 14:57:23,360] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 14:57:23,365] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 14:57:23,370] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 14:57:23,397] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 14:57:26,492] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 16:15:04,319] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 76
[2022-04-24 16:15:13,661] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\Program Files\\nodejs\\node_global;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x000001C4099A97C0>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-24 16:15:13,663] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-24 16:15:13,664] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-24 16:15:13,665] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-24 16:15:13,672] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2022-04-24 16:15:13,701] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:27:40,775] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:27:40,778] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:27:40,779] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-24 16:27:40,780] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-24 16:27:40,780] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:27:40,781] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:27:40,784] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:27:40,785] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:27:40,788] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/case/list/tree HTTP/1.1" 200 320
[2022-04-24 16:27:40,788] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/interface/search HTTP/1.1" 200 679
[2022-04-24 16:28:37,275] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:28:37,276] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 16:28:37,276] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:28:37,279] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:28:37,280] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 16:28:37,290] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:28:37,290] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 16:28:37,291] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:28:37,293] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:28:37,294] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 16:28:55,915] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:28:55,916] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 16:28:55,916] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:28:55,919] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:28:55,920] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 16:28:55,932] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:28:55,933] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 16:28:55,933] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:28:55,936] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:28:55,943] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 16:29:58,524] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:29:58,629] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:29:58,629] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:29:58,630] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 16:29:58,630] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 16:29:58,631] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:29:58,632] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:29:58,637] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:29:58,638] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:29:58,639] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 16:29:58,641] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 16:32:36,887] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:32:37,002] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:32:37,002] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:32:37,003] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 16:32:37,003] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 16:32:37,004] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:32:37,004] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:32:37,009] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:32:37,010] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 16:32:37,010] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:32:37,012] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 16:32:45,833] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:32:45,956] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:32:45,956] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:32:45,957] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 16:32:45,957] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 16:32:45,958] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:32:45,959] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:32:45,962] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:32:45,962] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:32:45,964] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 16:32:45,965] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 16:33:11,439] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:33:11,804] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:35:18,099] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:35:18,100] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:35:18,102] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 16:35:18,103] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 16:35:18,104] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:35:18,105] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:35:18,115] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:35:18,115] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:35:18,118] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 16:35:18,118] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 16:35:42,981] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:35:42,984] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 16:35:42,985] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:35:42,987] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:35:42,989] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 16:35:42,995] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:35:42,996] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 16:35:42,996] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:35:43,000] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:35:43,003] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 16:35:43,043] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:35:43,043] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 16:35:43,044] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:35:43,047] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:35:47,633] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 16:38:40,499] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 16:38:40,640] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:38:40,641] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:38:40,642] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 16:38:40,642] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 16:38:40,642] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:38:40,643] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:38:40,645] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:38:40,646] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:38:40,653] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 16:38:40,653] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 16:38:40,705] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 16:38:40,706] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 16:38:40,707] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 16:38:40,710] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 16:38:43,778] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 188610
[2022-04-24 17:02:02,578] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:07:29,521] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:07:29,892] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:12:46,986] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:12:47,234] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:12:47,235] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:12:47,237] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:12:47,237] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:12:47,238] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:12:47,238] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:12:47,247] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:12:47,250] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:12:47,255] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 17:12:47,262] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:12:47,370] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:12:47,370] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:12:47,371] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:12:47,377] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:12:50,914] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:14:58,789] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:14:58,790] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:14:58,790] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:14:58,793] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:15:01,155] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 2322
[2022-04-24 17:15:02,463] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:15:02,463] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:15:02,464] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:15:02,466] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:15:04,775] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10374
[2022-04-24 17:15:04,806] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:15:05,126] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:15:05,127] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:15:05,128] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:15:05,132] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:15:05,142] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 17:15:05,155] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:15:05,156] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:15:05,156] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:15:05,158] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:15:05,158] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:15:05,239] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:15:05,240] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:15:05,240] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:15:05,244] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:15:07,237] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:15:11,914] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:15:11,915] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:15:11,917] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:15:11,919] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:15:13,614] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 2322
[2022-04-24 17:17:40,702] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:17:40,941] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:17:40,942] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:17:40,943] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:17:40,943] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:17:40,943] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:17:40,944] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:17:40,948] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:17:40,956] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:17:40,960] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 6349
[2022-04-24 17:17:40,973] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:17:41,047] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:17:41,050] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:17:41,051] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:17:41,054] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:17:49,875] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 230142
[2022-04-24 17:18:01,794] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:18:01,794] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 17:18:01,796] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:18:01,798] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:18:01,817] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 200 69
[2022-04-24 17:18:01,840] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:18:01,843] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:18:01,844] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:18:01,848] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:18:01,851] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 2796
[2022-04-24 17:18:03,599] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:18:03,601] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 17:18:03,604] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:18:03,609] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:18:03,630] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 200 69
[2022-04-24 17:18:03,649] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:18:03,651] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:18:03,653] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:18:03,660] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:18:03,664] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:18:12,727] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:18:12,728] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:18:12,729] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:18:12,740] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:18:14,166] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 107
[2022-04-24 17:19:27,487] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=e5e90d277db5364a5e94ae36a4a30aa6 HTTP/1.1" 200 239
[2022-04-24 17:19:27,727] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:19:27,736] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:19:27,739] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:19:27,743] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:19:27,744] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:19:27,748] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:19:27,751] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:19:27,756] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:19:27,759] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:19:27,763] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:19:27,797] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:19:27,798] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:19:27,798] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:19:27,802] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:19:31,530] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:19:37,398] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:19:37,399] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:19:37,399] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:19:37,408] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:19:38,680] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkscolumninfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 345, in get_dataworks_column_info
    columnsinfo, columnsList = odps.gettablecolumnsinfo(old_table)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 64, in gettablecolumnsinfo
    columnsList = [i['column_name'] for i in result]
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 64, in <listcomp>
    columnsList = [i['column_name'] for i in result]
KeyError: 'column_name'
[2022-04-24 17:19:38,692] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 500 27
[2022-04-24 17:20:58,013] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\Program Files\\nodejs\\node_global;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e; User-Id=4; sidebarStatus=1; size=medium', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x0000018329E8E670>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-24 17:20:58,016] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-24 17:20:58,017] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-24 17:20:58,017] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-24 17:20:58,027] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2022-04-24 17:20:58,057] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:20:58,189] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:20:58,198] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:20:58,203] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:20:58,215] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:20:58,220] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:20:58,232] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:20:58,233] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:20:58,233] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:20:58,239] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:20:58,245] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:20:58,269] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:20:58,271] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:20:58,273] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:20:58,280] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:21:02,341] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:21:11,553] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:21:11,554] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:21:11,555] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:21:11,557] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:21:16,082] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 810
[2022-04-24 17:21:34,162] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:21:34,165] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:21:34,165] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 17:21:34,165] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:21:34,167] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:21:34,167] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:21:34,173] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:21:34,175] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:21:34,176] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:21:34,182] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/addProTableInfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 413, in addProTableInfo
    proId_id = tableinfo['proId_id']
KeyError: 'proId_id'
[2022-04-24 17:21:34,189] [basehttp.py:154] [basehttp:log_message] [ERROR]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 500 27
[2022-04-24 17:22:26,477] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:22:26,714] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:26,716] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:26,717] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:22:26,718] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:22:26,718] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:26,719] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:26,724] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:26,727] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:26,732] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:22:26,732] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:22:26,768] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:26,769] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:22:26,770] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:26,779] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:31,266] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:31,267] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:31,268] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 17:22:31,271] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 17:22:31,271] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:31,272] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:31,277] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:31,277] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:31,281] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 17:22:31,282] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 17:22:33,058] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:33,059] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:33,060] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:22:33,061] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:22:33,061] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:33,061] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:33,069] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:33,070] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:33,077] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:22:33,077] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:22:35,224] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:22:35,231] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:35,234] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:22:35,234] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:35,240] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:38,493] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:22:42,858] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:42,858] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:22:42,859] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:42,862] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:44,699] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:44,699] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:22:44,701] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:44,704] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:45,177] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:45,178] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:22:45,180] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:45,182] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:46,263] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:46,264] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:22:46,266] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:46,271] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:46,459] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:46,460] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:22:46,461] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:46,464] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:47,471] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:47,473] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:22:47,474] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:47,479] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:49,282] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10770
[2022-04-24 17:22:51,554] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10770
[2022-04-24 17:22:52,095] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10770
[2022-04-24 17:22:52,829] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10770
[2022-04-24 17:22:54,356] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:22:54,471] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10770
[2022-04-24 17:22:54,614] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:54,616] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:54,617] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:22:54,618] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:22:54,618] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:54,619] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:54,622] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:54,624] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:54,634] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 138
[2022-04-24 17:22:54,639] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:22:54,688] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:22:54,691] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:22:54,693] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:22:54,698] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:22:55,177] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 10770
[2022-04-24 17:23:00,185] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:23:08,032] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:23:08,035] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:23:08,040] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:23:08,047] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:23:14,003] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 8047
[2022-04-24 17:23:20,014] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:23:20,016] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 17:23:20,016] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:23:20,020] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:23:20,035] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 200 69
[2022-04-24 17:23:20,043] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:23:20,048] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:23:20,049] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:23:20,054] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:23:20,066] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7186
[2022-04-24 17:23:20,078] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:23:20,082] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:23:20,083] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:23:20,086] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:23:20,090] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7186
[2022-04-24 17:30:46,686] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:30:46,686] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:30:46,686] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:30:46,686] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:30:46,686] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:30:46,686] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:30:46,686] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:30:46,693] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:30:46,693] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:30:46,693] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:30:46,722] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:30:46,722] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:30:46,722] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:30:46,722] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:30:50,440] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:31:21,309] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:21,309] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:21,309] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:31:21,309] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:31:21,309] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:21,309] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:21,318] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:21,318] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:21,318] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:31:21,322] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:31:21,353] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:21,353] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:31:21,353] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:21,353] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:23,761] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:31:25,708] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:31:25,889] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:25,890] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:25,903] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:31:25,903] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:31:25,904] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:25,904] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:25,909] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:25,910] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:25,921] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:31:25,922] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:31:25,971] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:25,972] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:31:25,972] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:25,974] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:28,014] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:31:33,489] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:31:33,490] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:31:33,491] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:31:33,496] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:31:40,056] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 621
[2022-04-24 17:33:29,598] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:29,598] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:33:29,600] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:29,604] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:29,609] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:33:29,620] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:29,621] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:33:29,621] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:29,623] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:29,625] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:33:29,654] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:29,654] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:33:29,655] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:29,657] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:32,372] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:33:54,416] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:54,417] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:33:54,418] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:54,418] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:54,419] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:33:54,420] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:54,421] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:54,425] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:54,426] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:33:54,429] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:33:54,453] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:54,455] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:33:54,456] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:54,458] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:56,789] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:33:57,005] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:57,006] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:33:57,007] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:57,012] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:57,018] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:33:57,019] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:57,020] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:57,031] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:57,034] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:33:57,034] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:33:57,105] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:33:57,107] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:33:57,114] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:33:57,121] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:33:57,332] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:34:00,502] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:34:01,804] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:34:01,805] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:34:01,805] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:34:01,812] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:34:03,530] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 2414
[2022-04-24 17:36:32,481] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:36:32,481] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:36:32,481] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:36:32,481] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:36:32,481] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:36:32,495] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:36:32,495] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:36:32,495] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:36:32,495] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:36:32,495] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:36:32,519] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:36:32,519] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:36:32,519] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:36:32,519] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:36:35,638] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:36:45,217] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:36:45,218] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:36:45,218] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:36:45,219] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:36:45,219] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:36:45,219] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:36:45,224] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:36:45,225] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:36:45,231] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:36:45,231] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:36:45,263] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:36:45,263] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:36:45,263] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:36:45,263] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:36:47,005] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:37:03,080] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:37:03,081] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:37:03,083] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:37:03,093] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:37:05,591] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 1436
[2022-04-24 17:40:24,509] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:40:24,511] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:40:24,514] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:40:24,516] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:40:24,518] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:40:24,533] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:40:24,534] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:40:24,535] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:40:24,539] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:40:24,545] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:40:24,576] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:40:24,578] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:40:24,580] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:40:24,583] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:40:27,677] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:43:43,855] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:43:43,855] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:43:43,855] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:43:43,855] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:43:43,855] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:43:43,867] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:43:43,867] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:43:43,867] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:43:43,867] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:43:43,867] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:43:43,889] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:43:43,889] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:43:43,889] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:43:43,889] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:43:46,307] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:43:46,490] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:43:46,490] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:43:46,492] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:43:46,492] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:43:46,493] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:43:46,493] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:43:46,498] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:43:46,499] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:43:46,508] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:43:46,509] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:43:46,546] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:43:46,547] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:43:46,547] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:43:46,549] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:43:47,288] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:43:49,241] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:44:36,012] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:44:36,392] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:44:36,394] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:44:36,395] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:44:36,396] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:44:36,396] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:44:36,398] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:44:36,407] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:44:36,409] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:44:36,420] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:44:36,424] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:44:36,637] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:44:36,660] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:44:36,684] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:44:36,696] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:44:39,586] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:45:51,369] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:45:51,369] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:45:51,369] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:45:51,369] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:45:51,376] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:45:51,382] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:45:51,382] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:45:51,382] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:45:51,382] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:45:51,382] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:45:51,412] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:45:51,412] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:45:51,412] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:45:51,412] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:45:53,796] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:45:53,991] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:45:53,992] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:45:53,993] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:45:53,994] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:45:53,995] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:45:53,995] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:45:53,999] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:45:54,005] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:45:54,010] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:45:54,013] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:45:54,060] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:45:54,082] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:45:54,083] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:45:54,085] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:45:54,090] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:45:56,022] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:46:33,137] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:46:33,137] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:46:33,137] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:46:33,137] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:46:33,137] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:46:33,150] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:46:33,150] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:46:33,150] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:46:33,150] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:46:33,150] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:46:33,179] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:46:33,179] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:46:33,179] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:46:33,179] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:46:35,144] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:47:58,068] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:47:58,068] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:47:58,068] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:47:58,068] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:47:58,068] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:47:58,081] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:47:58,081] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:47:58,081] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:47:58,086] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:47:58,086] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:47:58,134] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:47:58,134] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:47:58,134] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:47:58,134] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:48:00,885] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 295572
[2022-04-24 17:51:57,910] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:51:57,911] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:51:57,912] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:51:57,916] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:51:57,921] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:51:57,930] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:51:57,931] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:51:57,932] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:51:57,935] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:51:57,937] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:51:57,969] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:51:57,970] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:51:57,971] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:51:57,975] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:52:02,372] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 521271
[2022-04-24 17:53:11,074] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:53:11,349] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:53:11,350] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:53:11,351] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:53:11,351] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:53:11,352] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:53:11,352] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:53:11,358] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:53:11,359] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:53:11,368] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:53:11,368] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:53:11,435] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:53:11,435] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:53:11,437] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:53:11,439] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:53:15,956] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 525633
[2022-04-24 17:54:28,970] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:54:29,248] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:29,250] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:29,251] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:54:29,251] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:54:29,251] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:29,252] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:29,260] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:29,261] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:29,265] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:54:29,267] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:54:29,334] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:29,336] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:54:29,338] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:29,344] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:32,683] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 525633
[2022-04-24 17:54:32,928] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:32,930] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:32,932] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 17:54:32,933] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 17:54:32,933] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:32,934] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:32,941] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:32,941] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:32,947] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 17:54:32,949] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 17:54:34,630] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:34,631] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:34,632] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:54:34,632] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:54:34,632] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:34,633] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:34,637] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:34,637] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:34,641] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:54:34,643] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:54:34,661] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:34,661] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:54:34,662] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:34,664] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:36,663] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 525633
[2022-04-24 17:54:40,464] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:54:40,465] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:54:40,465] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:54:40,467] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:54:42,027] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 1387
[2022-04-24 17:55:42,064] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:55:42,252] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:55:42,253] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:55:42,255] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:55:42,256] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:55:42,256] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:55:42,257] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:55:42,262] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:55:42,266] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:55:42,274] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:55:42,274] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:55:42,342] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:55:42,343] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:55:42,344] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:55:42,351] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:55:45,024] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 525633
[2022-04-24 17:57:06,950] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=bf26204f07a7b453ba50d8a39229f4c9 HTTP/1.1" 200 239
[2022-04-24 17:57:07,166] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:57:07,168] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:57:07,169] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 17:57:07,170] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 17:57:07,171] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:57:07,171] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:57:07,179] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:57:07,186] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 17:57:07,182] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:57:07,194] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 17:57:07,266] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:57:07,268] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 17:57:07,269] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:57:07,274] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:57:11,737] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 200 525633
[2022-04-24 17:57:13,511] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 17:57:13,512] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-24 17:57:13,512] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 17:57:13,514] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 17:57:15,516] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getdataworkscolumninfo HTTP/1.1" 200 1682
[2022-04-24 18:01:24,448] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:01:24,450] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:01:24,450] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProTableInfo():
[2022-04-24 18:01:24,451] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:01:24,451] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:01:24,453] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:01:24,460] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:01:24,461] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:01:24,466] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 7207
[2022-04-24 18:01:24,475] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/addProTableInfo HTTP/1.1" 200 69
[2022-04-24 18:01:24,503] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:01:24,504] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:01:24,504] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:01:24,509] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:01:24,516] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8864
[2022-04-24 18:03:11,293] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:03:11,293] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:03:11,294] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2022-04-24 18:03:11,294] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:03:11,295] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:03:11,295] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:03:11,298] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:03:11,298] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:03:11,310] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8864
[2022-04-24 18:03:11,318] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2022-04-24 18:03:11,339] [dataCheck.py:182] [dataCheck:runjob] [INFO]- 探查结束
[2022-04-24 18:04:42,491] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:04:42,491] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:04:42,492] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2022-04-24 18:04:42,492] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:04:42,492] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:04:42,492] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:04:42,495] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:04:42,495] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:04:42,499] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8875
[2022-04-24 18:04:42,506] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2022-04-24 18:04:42,516] [dataCheck.py:183] [dataCheck:runjob] [INFO]- 探查结束
[2022-04-24 18:07:26,209] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:07:26,209] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:07:26,210] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2022-04-24 18:07:26,211] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:07:26,211] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:07:26,213] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:07:26,215] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:07:26,216] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:07:26,219] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8875
[2022-04-24 18:07:26,233] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2022-04-24 18:07:26,248] [dataCheck.py:186] [dataCheck:runjob] [INFO]- 探查结束
[2022-04-24 18:11:58,060] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:11:58,060] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:11:58,061] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2022-04-24 18:11:58,061] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:11:58,062] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:11:58,062] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:11:58,064] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:11:58,065] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:11:58,068] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8875
[2022-04-24 18:11:58,079] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2022-04-24 18:11:58,094] [dataCheck.py:186] [dataCheck:runjob] [INFO]- 探查结束
[2022-04-24 18:12:48,616] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:12:48,617] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为dataexplorationjob():
[2022-04-24 18:12:48,618] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:12:48,621] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:12:48,649] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/dataexplorationjob HTTP/1.1" 200 69
[2022-04-24 18:12:48,655] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 18:12:48,656] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 18:12:48,657] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 18:12:48,678] [dataCheck.py:186] [dataCheck:runjob] [INFO]- 探查结束
[2022-04-24 18:12:48,688] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 18:12:48,696] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8875
[2022-04-24 20:51:26,453] [log.py:222] [log:log_response] [WARNING]- Not Found: /dev-api/v1/v1/api/login
[2022-04-24 20:51:26,457] [basehttp.py:154] [basehttp:log_message] [WARNING]- "POST /dev-api/v1/v1/api/login HTTP/1.1" 404 77
[2022-04-24 20:51:31,113] [log.py:222] [log:log_response] [WARNING]- Not Found: /dev-api/v1/v1/api/login
[2022-04-24 20:51:31,114] [basehttp.py:154] [basehttp:log_message] [WARNING]- "POST /dev-api/v1/v1/api/login HTTP/1.1" 404 77
[2022-04-24 20:51:32,670] [log.py:222] [log:log_response] [WARNING]- Not Found: /dev-api/v1/v1/api/login
[2022-04-24 20:51:32,671] [basehttp.py:154] [basehttp:log_message] [WARNING]- "GET /dev-api/v1/v1/api/login HTTP/1.1" 404 77
[2022-04-24 21:10:33,659] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 76
[2022-04-24 21:10:45,152] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 76
[2022-04-24 21:10:56,031] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\Program Files\\nodejs\\node_global;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x00000286FA207D90>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-24 21:10:56,036] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-24 21:10:56,038] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-24 21:10:56,041] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-24 21:10:56,057] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2022-04-24 21:10:56,087] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=17c6e36c457da06a6ceb5ba0ff55d865 HTTP/1.1" 200 239
[2022-04-24 21:13:03,959] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=17c6e36c457da06a6ceb5ba0ff55d865 HTTP/1.1" 200 239
[2022-04-24 21:15:13,137] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=17c6e36c457da06a6ceb5ba0ff55d865 HTTP/1.1" 200 239
[2022-04-24 21:15:56,266] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\Program Files\\nodejs\\node_global;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x00000286FA25A1C0>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-24 21:15:56,272] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-24 21:15:56,273] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-24 21:15:56,274] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-24 21:15:56,298] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/login HTTP/1.1" 200 137
[2022-04-24 21:15:56,332] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/user/info?token=4b93742681289e612b52c73721a532e9 HTTP/1.1" 200 239
[2022-04-24 21:16:01,739] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 21:16:01,740] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 21:16:01,742] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 21:16:01,748] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 21:16:01,753] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/gettestproject HTTP/1.1" 200 475
[2022-04-24 21:16:01,771] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 21:16:01,772] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 21:16:01,774] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 21:16:01,779] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 21:16:01,784] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getPrjUserinfo HTTP/1.1" 200 480
[2022-04-24 21:18:13,971] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 21:18:13,973] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 21:18:13,975] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 21:18:13,978] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getDatabase():
[2022-04-24 21:18:13,978] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 21:18:13,979] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 21:18:13,986] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 21:18:13,987] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 21:18:13,999] [basehttp.py:154] [basehttp:log_message] [INFO]- "POST /v1/api/tablecheck/getProTableInfo HTTP/1.1" 200 8875
[2022-04-24 21:18:13,999] [basehttp.py:154] [basehttp:log_message] [INFO]- "GET /v1/api/tablecheck/getDatabase HTTP/1.1" 200 397
[2022-04-24 21:18:14,056] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 21:18:14,058] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 21:18:14,059] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 21:18:14,069] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 21:19:14,179] [log.py:222] [log:log_response] [ERROR]- Internal Server Error: /v1/api/tablecheck/getdataworkstableinfo
Traceback (most recent call last):
  File "D:\python\lib\site-packages\dbutils\pooled_db.py", line 320, in connection
    con = self._idle_cache.pop(0)
IndexError: pop from empty list

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\python\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "D:\python\lib\site-packages\django\core\handlers\base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\python\lib\site-packages\django\utils\decorators.py", line 45, in _wrapper
    return bound_method(*args, **kwargs)
  File "D:\python\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\project\AutomationPlatformDjango\Decorator\RequestDecorator.py", line 35, in interceptToken
    result = func(request)
  File "D:\project\AutomationPlatformDjango\data_monior\views\datamonior\DataMoniorView.py", line 327, in get_dataworks_info
    result = odps.gettableinfo(table=None)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\dataExploration.py", line 53, in gettableinfo
    result = self.o.select_sql_dict(sql)
  File "D:\project\AutomationPlatformDjango\data_monior\dataworksTableCheck\servers\odpsSelect.py", line 62, in select_sql_dict
    conn = self.pool.connection()
  File "D:\python\lib\site-packages\dbutils\pooled_db.py", line 322, in connection
    con = self.steady_connection()
  File "D:\python\lib\site-packages\dbutils\pooled_db.py", line 269, in steady_connection
    return connect(
  File "D:\python\lib\site-packages\dbutils\steady_db.py", line 135, in connect
    return SteadyDBConnection(
  File "D:\python\lib\site-packages\dbutils\steady_db.py", line 190, in __init__
    self._store(self._create())
  File "D:\python\lib\site-packages\dbutils\steady_db.py", line 208, in _create
    con = self._creator(*self._args, **self._kwargs)
pyodbc.OperationalError: ('08001', '[08001] [Microsoft][ODBC Driver 17 for SQL Server]命名管道提供程序: 无法打开与 SQL Server 的连接 [53].  (53) (SQLDriverConnect); [08001] [Microsoft][ODBC Driver 17 for SQL Server]登录超时已过期 (0); [08001] [Microsoft][ODBC Driver 17 for SQL Server]与 SQL Server 建立连接时发生了与网络相关的或特定于实例的错误。找不到或无法访问服务器。请检查实例名称是否正确以及 SQL Server 是否配置为允许远程连接。有关详细信息，请参阅 SQL Server 联机丛书。 (53)')
[2022-04-24 21:19:14,198] [basehttp.py:154] [basehttp:log_message] [ERROR]- "GET /v1/api/tablecheck/getdataworkstableinfo?source=1 HTTP/1.1" 500 27
