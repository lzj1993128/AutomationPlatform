[2022-01-12 16:33:29,330] [LoginView.py:61] [LoginView:login] [INFO]- {'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'COMPUTERNAME': 'DESKTOP-3R8DDF0', 'ONEDRIVECONSUMER': 'C:\\Users\\86155\\OneDrive', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\86155\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-32', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '8', 'LOGONSERVER': '\\\\DESKTOP-3R8DDF0', 'TEMP': 'C:\\Users\\86155\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\86155\\AppData\\Local\\Temp', 'HOMEPATH': '\\Users\\86155', '__PSLOCKDOWNPOLICY': '4', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'IDEA_INITIAL_DIRECTORY': 'E:\\桌面', 'USERNAME': '86155', 'PROGRAMFILES': 'C:\\Program Files', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-3R8DDF0', 'LOCALAPPDATA': 'C:\\Users\\86155\\AppData\\Local', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'GOLAND': 'D:\\Program Files\\JetBrains\\GoLand 2019.2.3\\bin;', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 142 Stepping 11, GenuineIntel', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'APPDATA': 'C:\\Users\\86155\\AppData\\Roaming', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERDOMAIN': 'DESKTOP-3R8DDF0', 'GOPATH': 'D:\\gotest', 'PROCESSOR_LEVEL': '6', 'PROGRAMDATA': 'C:\\ProgramData', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'SYSTEMROOT': 'C:\\WINDOWS', 'USERPROFILE': 'C:\\Users\\86155', 'PROCESSOR_REVISION': '8e0b', 'ONEDRIVE': 'C:\\Users\\86155\\OneDrive', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;E:\\app\\86155\\product\\11.2.0\\dbhome_1\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;D:\\软件\\TortoiseSVN\\bin;C;\\Program Files\\PuTTY\\;C:\\Program Files\\PuTTY;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;D:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;D:\\tesserract\\Tesseract-OCR;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\Python36;D:\\Python36\\Scripts;D:\\Program Files\\nodejs\\node_modules\\npm;E:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;D:\\Program Files\\nodejs\\;D:\\go\\bin;D:\\Program Files\\Git\\cmd;C:\\Users\\86155\\AppData\\Local\\Microsoft\\WindowsApps;D:\\tesserract\\Tesseract-OCR;D:\\Python36\\Lib\\site-packages\\allure-2.13.5\\bin;C:\\Users\\86155\\AppData\\Roaming\\npm;D:\\Program Files\\nodejs\\node_global;D:\\go\\bin;D:\\Program Files\\JetBrains\\GoLand 2019.2.3\\bin;;', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'NODE_PATH': 'D:\\Program Files\\nodejs\\node_modules', 'WINDIR': 'C:\\WINDOWS', 'PROGRAMW6432': 'C:\\Program Files', 'OS': 'Windows_NT', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PUBLIC': 'C:\\Users\\Public', 'HOMEDRIVE': 'C:', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'DESKTOP-3R8DDF0', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Goland-7bdd33bb=dfd5a6de-aae7-4cf2-9a8e-3177b7f085b2', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x000002D03C933588>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-01-12 16:33:29,337] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-01-12 16:33:29,337] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-01-12 16:33:29,343] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-01-12 16:33:32,504] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:33:32,505] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:33:32,522] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:33:32,581] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:33:32,730] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:33:32,734] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:33:32,735] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:33:32,750] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:33:41,772] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:33:41,773] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:33:41,776] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:33:41,785] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:34:00,499] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:34:00,500] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:34:00,502] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:34:00,625] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:34:00,754] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:34:00,757] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:34:00,759] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:34:00,769] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:34:11,060] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:34:11,061] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getprojectmodule():
[2022-01-12 16:34:11,063] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:34:11,074] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:34:28,830] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:34:28,832] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为QuestionInfo():
[2022-01-12 16:34:28,833] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:34:28,847] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:36:57,658] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:36:57,660] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:36:57,662] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:36:57,664] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:36:57,664] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:36:57,666] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:36:57,687] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:36:57,708] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:00,180] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:00,182] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:00,183] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:37:00,184] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:37:00,184] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:00,185] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:00,200] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:00,202] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:05,649] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:05,650] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getprojectmodule():
[2022-01-12 16:37:05,651] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:05,675] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:14,913] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:14,914] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为QuestionInfo():
[2022-01-12 16:37:14,915] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:14,923] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:15,030] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:15,031] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:37:15,031] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:15,091] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:15,235] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:15,239] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:37:15,240] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:37:15,240] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为questionsenddingtalk():
[2022-01-12 16:37:15,242] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:15,246] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:37:15,267] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:37:15,269] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:39:10,744] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:39:10,746] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:39:10,747] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:39:10,748] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:39:10,749] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:39:10,749] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:39:10,765] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:39:10,774] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:20,824] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:20,826] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:20,828] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:40:20,828] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:40:20,829] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:20,830] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:20,860] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:20,865] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:39,759] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:39,760] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getprojectmodule():
[2022-01-12 16:40:39,761] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:39,770] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:48,854] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:48,856] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为QuestionInfo():
[2022-01-12 16:40:48,859] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:48,882] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:49,015] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:49,020] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:40:49,022] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:49,092] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:49,154] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:49,157] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:40:49,158] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:49,175] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:40:49,227] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:40:49,228] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为questionsenddingtalk():
[2022-01-12 16:40:49,230] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:40:49,245] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:45:26,964] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:45:26,965] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:45:26,966] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:45:26,980] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:45:27,018] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:45:27,019] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:45:27,019] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:45:27,040] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:46:01,288] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:46:01,290] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:46:01,292] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:46:01,313] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:46:01,341] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:46:01,371] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:46:01,482] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:46:01,491] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:48:07,637] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:48:07,640] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:48:07,641] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-01-12 16:48:07,644] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:48:07,645] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:48:07,646] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:48:07,667] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:48:07,675] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:49:17,483] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:49:17,484] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:49:17,485] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:49:17,498] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:49:17,898] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:49:17,899] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:49:17,901] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:49:17,935] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:49:19,027] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:49:19,028] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:49:19,029] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:49:19,047] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:49:20,041] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:49:20,042] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:49:20,044] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:49:20,054] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-01-12 16:49:20,602] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-01-12 16:49:20,603] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getquestioninfo():
[2022-01-12 16:49:20,603] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-01-12 16:49:20,614] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
