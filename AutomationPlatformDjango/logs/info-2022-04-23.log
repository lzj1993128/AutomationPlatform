[2022-04-23 12:29:20,854] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 12:29:20,854] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userAdd():
[2022-04-23 12:29:20,861] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 12:29:20,861] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-23 12:35:04,287] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 12:35:04,287] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userAdd():
[2022-04-23 12:35:04,299] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 12:35:04,299] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-23 14:24:00,278] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x00000159E4D67220>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-23 14:24:00,282] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-23 14:24:00,285] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-23 14:24:00,286] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-23 14:24:16,487] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:16,487] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:16,487] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为indexData():
[2022-04-23 14:24:16,491] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为indexStatistics():
[2022-04-23 14:24:16,491] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:16,491] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:16,498] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:16,498] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:17,900] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:17,900] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:17,900] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:17,900] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-23 14:24:17,905] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:24:17,905] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-23 14:24:17,905] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:17,905] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:17,905] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:17,909] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:17,909] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:17,913] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:21,241] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:21,241] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:24:21,245] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:21,247] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:21,249] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:21,249] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-23 14:24:21,249] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-23 14:24:21,254] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:21,254] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:21,254] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:21,262] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:21,264] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:21,267] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:21,269] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:24:21,270] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:21,274] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:32,203] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:32,207] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:24:32,207] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:24:32,207] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:24:32,211] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:32,211] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:24:32,218] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:24:32,222] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:25:18,050] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:25:18,050] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userSearch():
[2022-04-23 14:25:18,054] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:25:18,064] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:25:38,704] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:25:38,704] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userAdd():
[2022-04-23 14:25:38,709] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:25:38,713] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:26:46,095] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:26:46,095] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userAdd():
[2022-04-23 14:26:46,099] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:26:46,107] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:26:46,271] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:26:46,275] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userSearch():
[2022-04-23 14:26:46,277] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:26:46,284] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:27:01,233] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e; sidebarStatus=1', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x00000159A9649940>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-23 14:27:01,242] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-23 14:27:01,244] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- None
[2022-04-23 14:27:01,253] [LoginService.py:25] [LoginService:checkLoginIP] [INFO]- 检测到登录ip不一致，添加次数
[2022-04-23 14:27:01,480] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:27:01,484] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userSearch():
[2022-04-23 14:27:01,495] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:27:01,499] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:27:40,578] [LoginView.py:63] [LoginView:login] [INFO]- {'LOCALAPPDATA': 'C:\\Users\\lizj40\\AppData\\Local', 'PROGRAMFILES': 'C:\\Program Files', 'LDMS_PREFERRED_SERVER': 'HKWPLDAP02', 'PROMPT': '$P$G', 'USERNAME': 'lizj40', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\lizj40\\Desktop', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'NUMBER_OF_PROCESSORS': '8', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\lizj40\\AppData\\Roaming\\JetBrains\\PyCharm2020.3\\terminal\\history\\history-108', 'SYSTEMDRIVE': 'C:', 'USERPROFILE': 'C:\\Users\\lizj40', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMDATA': 'C:\\ProgramData', 'COR_PROFILER': '{B74E4EB1-99CB-4B76-AF5F-2A0A973DC9A9}', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'AAD_PASSWORD': 'Lhb1993128', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'USERDOMAIN': 'LENOVO', 'ZES_ENABLE_SYSMAN': '1', 'PROCESSOR_LEVEL': '6', 'TEMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'STTASKFOLDERPATH': 'Ivanti\\PatchSDK\\Deployments', 'PROGRAMW6432': 'C:\\Program Files', 'APPDATA': 'C:\\Users\\lizj40\\AppData\\Roaming', 'LOGONSERVER': '\\\\CDWPADDS01', 'CLASSPATH': '.;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\dt.jar;D:\\Program Files\\Java\\jdk-18.0.1\\lib\\tools.jar; ', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'JAVA_HOME': 'D:\\Program Files\\Java\\jdk-18.0.1', 'COR_ENABLE_PROFILING': '1', 'SYSTEMROOT': 'C:\\windows', 'COMPUTERNAME': 'LIZJ40-PF3JMN8N', 'LDMS_LOCAL_DIR': 'C:\\Program Files (x86)\\LANDesk\\LDClient\\Data', 'SESSIONNAME': 'Console', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'HOMEPATH': '\\Users\\lizj40', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'WINDIR': 'C:\\windows', 'TMP': 'C:\\Users\\lizj40\\AppData\\Local\\Temp', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'USERDNSDOMAIN': 'LENOVO.COM', 'PATH': 'C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Microsoft SQL Server\\150\\DTS\\Binn\\;C:\\Program Files\\Azure Data Studio\\bin;D:\\Program Files\\Git\\cmd;D:\\Program Files\\maven\\apache-maven-3.6.3\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\bin;D:\\Program Files\\Java\\jdk-18.0.1\\jre\\bin;D:\\Program Files\\nodejs\\;D:\\python\\Scripts\\;D:\\python\\;C:\\Users\\lizj40\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Azure Data Studio\\bin;D:\\SyncTestCaseGUI-0224;D:\\Program Files\\fiddler;C:\\Users\\lizj40\\AppData\\Roaming\\npm', 'PROCESSOR_REVISION': '8c01', 'HOMEDRIVE': 'C:', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'OS': 'Windows_NT', 'ONEDRIVE': 'C:\\Users\\lizj40\\OneDrive', 'USERDOMAIN_ROAMINGPROFILE': 'LENOVO', 'AAD_USER': 'lizj40@lenovo.com', 'MAVEN_HOME': 'D:\\Program Files\\maven\\apache-maven-3.6.3', 'DJANGO_SETTINGS_MODULE': 'AutomationPlatformDjango.settings', 'RUN_MAIN': 'true', 'SERVER_NAME': 'LIZJ40-PF3JMN8N.lenovo.com', 'GATEWAY_INTERFACE': 'CGI/1.1', 'SERVER_PORT': '8000', 'REMOTE_HOST': '', 'CONTENT_LENGTH': '41', 'SCRIPT_NAME': '', 'SERVER_PROTOCOL': 'HTTP/1.1', 'SERVER_SOFTWARE': 'WSGIServer/0.2', 'REQUEST_METHOD': 'POST', 'PATH_INFO': '/v1/api/login', 'QUERY_STRING': '', 'REMOTE_ADDR': '127.0.0.1', 'CONTENT_TYPE': 'application/json;charset=UTF-8', 'HTTP_X_FORWARDED_HOST': 'localhost:9527', 'HTTP_X_FORWARDED_PROTO': 'http', 'HTTP_X_FORWARDED_PORT': '9527', 'HTTP_X_FORWARDED_FOR': '127.0.0.1', 'HTTP_COOKIE': 'Idea-ce9b3263=0f991cef-7ff6-4945-9659-75b5441c9a4e; sidebarStatus=1', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_REFERER': 'http://localhost:9527/', 'HTTP_SEC_FETCH_DEST': 'empty', 'HTTP_SEC_FETCH_MODE': 'cors', 'HTTP_SEC_FETCH_SITE': 'same-origin', 'HTTP_ORIGIN': 'http://localhost:9527', 'HTTP_SEC_CH_UA_PLATFORM': '"Windows"', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36', 'HTTP_SEC_CH_UA_MOBILE': '?0', 'HTTP_ACCEPT': 'application/json, text/plain, */*', 'HTTP_SEC_CH_UA': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'HTTP_CONNECTION': 'close', 'HTTP_HOST': '127.0.0.1:8000', 'wsgi.input': <django.core.handlers.wsgi.LimitedStream object at 0x000002B5EC2F2AF0>, 'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>, 'wsgi.version': (1, 0), 'wsgi.run_once': False, 'wsgi.url_scheme': 'http', 'wsgi.multithread': True, 'wsgi.multiprocess': False, 'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>}
[2022-04-23 14:27:40,587] [LoginService.py:21] [LoginService:checkLoginIP] [INFO]- 获取的ip
[2022-04-23 14:27:40,587] [LoginService.py:22] [LoginService:checkLoginIP] [INFO]- 127.0.0.1
[2022-04-23 14:27:40,592] [LoginService.py:29] [LoginService:checkLoginIP] [INFO]- 登录ip一致，不进行统计
[2022-04-23 14:27:40,772] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:27:40,774] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userSearch():
[2022-04-23 14:27:40,778] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:27:40,788] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:06,315] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:06,315] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:06,319] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:28:06,325] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:28:06,326] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:06,327] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:06,340] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:06,340] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:09,923] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:09,927] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:09,927] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:28:09,935] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:28:09,935] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:09,939] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:09,948] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:09,950] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:18,023] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:18,029] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为interfaceSearch():
[2022-04-23 14:28:18,029] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:18,037] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:18,060] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:18,061] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:18,063] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:18,067] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:18,088] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:18,088] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-23 14:28:18,088] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:18,099] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:36,645] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:36,645] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:36,645] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为indexData():
[2022-04-23 14:28:36,651] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为indexStatistics():
[2022-04-23 14:28:36,651] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:36,653] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:36,658] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:36,658] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:37,800] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:37,801] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:37,823] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:37,826] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjectInfo():
[2022-04-23 14:28:37,826] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:37,827] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:37,831] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:37,836] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:37,853] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:37,855] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:37,857] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:37,861] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:37,861] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:37,866] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-23 14:28:37,871] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:37,875] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:39,773] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:39,773] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:39,773] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:39,777] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:39,777] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:39,777] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:39,786] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:39,786] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:40,234] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:40,234] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:40,234] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:40,238] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:40,238] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:40,238] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:40,249] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:40,249] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:40,717] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:40,721] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:40,721] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:40,725] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:40,725] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:40,725] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:40,733] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:40,733] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:41,230] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:41,233] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:41,233] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:41,238] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:41,241] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:41,245] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:41,251] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:41,259] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:41,621] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:41,621] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:41,626] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:41,626] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:41,631] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:41,632] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:41,636] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:41,640] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:41,937] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:41,937] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:41,941] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:41,941] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:41,941] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:41,945] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:41,952] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:41,956] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:42,381] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:42,382] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:42,386] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:42,387] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:42,389] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:42,389] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:42,398] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:42,398] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:42,775] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:42,775] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:42,779] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:42,783] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:42,786] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:42,791] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:42,799] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:42,801] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:43,085] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:43,085] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:28:43,089] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为caseCreatCaseSearch():
[2022-04-23 14:28:43,089] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getCaseTree():
[2022-04-23 14:28:43,093] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:43,093] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:28:43,099] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:28:43,103] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:03,271] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:03,272] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:03,276] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:32:03,281] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:32:03,281] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:03,285] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:03,294] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:03,294] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:11,451] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:11,455] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-23 14:32:11,461] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:11,467] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:11,483] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:11,487] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchRebot():
[2022-04-23 14:32:11,488] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:11,492] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:19,234] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:19,238] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-23 14:32:19,242] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:19,248] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:21,820] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:21,820] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-23 14:32:21,824] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:21,833] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:28,126] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:28,126] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectAdd():
[2022-04-23 14:32:28,134] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:28,150] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:28,205] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:28,205] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-23 14:32:28,208] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:28,219] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:32,812] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:32,812] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:32,812] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:32:32,817] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:32:32,817] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:32,817] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:32,828] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:32,832] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:40,798] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:40,800] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为moduleSeach():
[2022-04-23 14:32:40,802] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:40,810] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:44,804] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:44,804] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为moduleAdd():
[2022-04-23 14:32:44,808] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:44,813] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:44,869] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:44,869] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为moduleSeach():
[2022-04-23 14:32:44,874] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:44,882] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:47,228] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:47,231] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-23 14:32:47,235] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:47,238] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:49,666] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:49,668] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-23 14:32:49,670] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:49,671] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:53,007] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:53,007] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessAdd():
[2022-04-23 14:32:53,011] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:53,020] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:53,065] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:53,069] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为businessSearch():
[2022-04-23 14:32:53,069] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:53,082] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:55,962] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:55,962] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:32:55,962] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:32:55,969] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:32:55,969] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:55,971] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:32:55,979] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:32:55,983] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:00,788] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:00,790] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:00,790] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:33:00,795] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:33:00,795] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:00,795] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:00,802] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:00,807] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:07,752] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:07,755] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:33:07,757] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:07,765] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:07,792] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:07,792] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:33:07,796] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:07,803] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:22,171] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:22,175] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-23 14:33:22,178] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:22,188] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:23,503] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:23,530] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-23 14:33:23,538] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:23,546] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:23,564] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:23,564] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchRebot():
[2022-04-23 14:33:23,564] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:23,573] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:30,070] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:30,074] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-23 14:33:30,074] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:30,082] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:33,166] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:33,170] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:33:33,175] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:33,189] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:33,209] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:33,209] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:33:33,214] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:33,218] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:38,333] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:38,333] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:33:38,339] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:33:38,339] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:33:38,339] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:38,340] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:33:38,343] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:33:38,343] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:00,592] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:00,596] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-23 14:36:00,596] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:00,605] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:02,268] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:02,268] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:02,270] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:36:02,271] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:36:02,271] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:02,275] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:02,281] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:02,281] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:05,872] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:05,877] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:05,877] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-23 14:36:05,877] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchRebot():
[2022-04-23 14:36:05,880] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:05,881] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:05,890] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:05,891] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:10,177] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:10,182] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectAdd():
[2022-04-23 14:36:10,182] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:10,190] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:36:10,246] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:36:10,246] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为projectSearch():
[2022-04-23 14:36:10,250] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:36:10,259] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:37:40,496] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:37:40,496] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:37:40,496] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:37:40,500] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:37:40,500] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:37:40,503] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:37:40,508] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:37:40,513] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:38:13,188] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:38:13,189] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:38:13,189] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:38:13,189] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:38:13,189] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:38:13,189] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:38:13,195] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:38:13,198] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:39:00,307] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:39:00,309] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:39:00,310] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:39:00,319] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-23 14:43:16,448] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:43:16,449] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:43:16,449] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:43:16,450] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:43:16,451] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:43:16,452] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:43:16,457] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:43:16,460] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:45:01,415] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:45:01,418] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:45:01,418] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:45:01,418] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:45:01,418] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:45:01,423] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:45:01,429] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:45:01,433] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:45:13,776] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:45:13,780] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProjectInfo():
[2022-04-23 14:45:13,785] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:45:13,789] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:48:53,574] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:48:53,578] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProjectInfo():
[2022-04-23 14:48:53,585] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:48:53,593] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:55:47,731] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:55:47,731] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为userAdd():
[2022-04-23 14:55:47,735] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:55:47,742] [RequestDecorator.py:23] [RequestDecorator:interceptToken] [INFO]- 获取数据库中的token异常，说明userid为空或者不存在
[2022-04-23 14:58:55,870] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:58:55,873] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:58:55,878] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:58:55,878] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 14:58:55,878] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:58:55,878] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:58:55,883] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:58:55,886] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:59:04,174] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:59:04,174] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addProjectInfo():
[2022-04-23 14:59:04,177] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:59:04,183] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:59:04,227] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:59:04,227] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 14:59:04,231] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:59:04,240] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:59:06,505] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:59:06,507] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 14:59:06,509] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:59:06,517] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:59:06,530] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:59:06,530] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 14:59:06,532] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:59:06,536] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:59:45,476] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:59:45,480] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 14:59:45,480] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 14:59:45,482] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 14:59:45,482] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:59:45,483] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 14:59:45,488] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 14:59:45,489] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:00:06,523] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:00:06,523] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:00:06,523] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 15:00:06,523] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 15:00:06,527] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:00:06,527] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:00:06,543] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:00:06,545] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:01:57,262] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:01:57,265] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-23 15:01:57,266] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:01:57,267] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:01:57,281] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:01:57,281] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-23 15:01:57,283] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:01:57,284] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:01:59,552] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:01:59,555] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:01:59,555] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 15:01:59,557] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 15:01:59,558] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:01:59,558] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:01:59,558] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:01:59,562] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:02:32,531] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:02:32,531] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为gettestcase():
[2022-04-23 15:02:32,537] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:02:32,550] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:02:33,506] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:02:33,506] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:02:33,506] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 15:02:33,506] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 15:02:33,510] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:02:33,511] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:02:33,515] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:02:33,516] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:06:52,704] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:06:52,705] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 15:06:52,712] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:06:52,722] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:06:52,735] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:06:52,735] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 15:06:52,735] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:06:52,738] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:07:01,036] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:07:01,036] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:07:01,041] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 15:07:01,042] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 15:07:01,042] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:07:01,042] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:07:01,051] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:07:01,054] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:07:13,118] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:07:13,118] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_column_info():
[2022-04-23 15:07:13,118] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:07:13,126] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:07:18,686] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:07:18,686] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-23 15:07:18,686] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-23 15:07:18,690] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-23 15:07:18,691] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:07:18,691] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-23 15:07:18,697] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-23 15:07:18,700] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:40:26,926] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:40:26,928] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 09:40:26,929] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:40:26,929] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:40:26,930] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 09:40:26,934] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:40:26,941] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:40:26,942] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:40:29,551] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:40:29,552] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:40:29,555] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getProTableInfo():
[2022-04-24 09:40:29,555] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为get_dataworks_info():
[2022-04-24 09:40:29,557] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:40:29,557] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:40:29,559] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:40:29,572] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:42:47,109] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:42:47,109] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 09:42:47,110] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:42:47,112] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:45:37,094] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:45:37,096] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addDB():
[2022-04-24 09:45:37,096] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:45:37,101] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:45:37,145] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:45:37,148] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 09:45:37,148] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:45:37,156] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:45:56,808] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:45:56,809] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为addDB():
[2022-04-24 09:45:56,809] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:45:56,812] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:45:56,861] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:45:56,862] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为searchDB():
[2022-04-24 09:45:56,863] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:45:56,868] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:46:02,691] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:46:02,694] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getTestProject():
[2022-04-24 09:46:02,695] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:46:02,704] [RequestDecorator.py:15] [RequestDecorator:interceptToken] [INFO]- 检查request中是否包含token和userId
[2022-04-24 09:46:02,705] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
[2022-04-24 09:46:02,706] [RequestDecorator.py:16] [RequestDecorator:interceptToken] [INFO]- 执行的请求为getPrjUserinfo():
[2022-04-24 09:46:02,708] [RequestDecorator.py:20] [RequestDecorator:interceptToken] [INFO]- 获取数据库中存在的token
[2022-04-24 09:46:02,714] [RequestDecorator.py:34] [RequestDecorator:interceptToken] [INFO]- 两个token一致
